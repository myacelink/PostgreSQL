◼︎ 명령문 동작

client_min_messages(enum)
클라이언트에 보낼 메시지 수준을 제어합니다. 유효한 값은 DEBUG5, DEBUG4, DEBUG3, DEBUG2, DEBUG1, LOG, NOTICE, WARNING 및 ERROR입니다.
각 레벨에는 그 뒤에 오는 모든 레벨이 포함됩니다. 레벨이 낮을수록 더 적은 수의 메시지가 전송됩니다. 기본값은 NOTICE입니다.
여기서 LOG의 순위는 log_min_messages와 다릅니다.

INFO 레벨 메시지는 항상 클라이언트로 전송됩니다.

search_path(string)
이 변수는 개체(테이블, 데이터 유형, 함수 등)가 스키마가 지정되지 않은 단순 이름으로 참조될 때 스키마가 검색되는 순서를 지정합니다.
다른 스키마에 동일한 이름의 개체가 있는 경우 검색 경로에서 먼저 찾은 개체가 사용됩니다.
검색 경로의 스키마에 없는 개체는 포함된 스키마를 한정된(점으로 구분된) 이름으로 지정해야만 참조할 수 있습니다.

search_path 값은 쉼표로 구분된 스키마 이름 목록이어야 합니다. 기존 스키마가 아니거나 사용자에게 USAGE 권한이 없는 스키마인 이름은 자동으로 무시됩니다.

목록 항목 중 하나가 특수 이름 $user인 경우 CURRENT_USER에 의해 반환된 이름을 가진 스키마가 있고, 해당 스키마와 사용자에게 USAGE 권한이 있는 경우 해당 스키마가 대체됩니다.
(그렇지 않으면 $user는 무시됩니다.)

시스템 카탈로그 스키마 pg_catalog는 경로에 언급되었는지 여부에 관계없이 항상 검색됩니다. 경로에 언급된 경우 지정된 순서로 검색됩니다.
pg_catalog가 경로에 없으면 경로 항목을 검색하기 전에 검색됩니다.

마찬가지로 현재 세션의 임시 테이블 스키마인 pg_temp_nnn이 있으면 항상 검색됩니다. 별칭 pg_temp를 사용하여 경로에 명시적으로 나열할 수 있습니다.
경로에 나열되지 않으면 먼저 검색됩니다(pg_catalog보다 먼저). 그러나 임시 스키마는 관계(테이블, 뷰, 시퀀스 등) 및 데이터 유형 이름에 대해서만 검색됩니다. 함수 또는 연산자 이름을 검색하지 않습니다.

특정 대상 스키마를 지정하지 않고 객체를 생성하면 search_path에 명명된 첫번째 유효한 스키마에 배치됩니다. 검색 경로가 비어 있으면 오류가 보고됩니다.

이 매개변수의 기본값은 "$user", public입니다. 이 설정은 데이터베이스의 공유 사용(사용자에게 개인 스키마가 없고 모든 사용자가 공용 스키마를 공유하는 경우),
사용자별 개인 스키마 및 이들의 조합을 지원합니다. 전역적으로 또는 사용자별로 기본 검색 경로 설정을 변경하여 다른 효과를 얻을 수 있습니다.

스키마 처리에 대한 자세한 내용은 5.9절을 참조하십시오. 특히 기본 구성은 데이터베이스에 단일 사용자 또는 상호 신뢰하는 소수의 사용자가 있는 경우에만 적합합니다.
5.9 : https://www.postgresql.org/docs/12/ddl-schemas.html

검색 경로의 현재 유효 값은 SQL 함수 current_schemas를 통해 조사할 수 있습니다(섹션 9.25 참조).
current_schemas는 search_path에 나타나는 항목이 어떻게 해결되었는지를 보여주기 때문에 이것은 search_path의 값을 검사하는 것과 완전히 같지 않습니다.

row_security (boolean)
이 변수는 행 보안 정책을 적용하는 대신 오류를 발생시킬지 여부를 제어합니다. on으로 설정하면 정책이 정상적으로 적용됩니다.
off로 설정하면 쿼리가 실패하고 그렇지 않으면 하나 이상의 정책이 적용됩니다. 기본값은 켜짐입니다. 제한된 행 가시성이 잘못된 결과를 유발할 수 있는 경우 끄기로 변경합니다.
예를 들어 pg_dump는 기본적으로 해당 변경을 수행합니다. 이 변수는 BYPASSRLS 속성이 있는 수퍼유저 및 역할에 이르기까지 모든 행 보안 정책을 우회하는 역할에 영향을 미치지 않습니다.

행 보안 정책에 대한 자세한 내용은 CREATE POLICY를 참조하십시오.

default_table_access_method(string)
이 매개변수는 CREATE 명령이 액세스 방법을 명시적으로 지정하지 않거나 SELECT ... INTO를 사용하여
테이블 액세스 방법을 지정할 수 없는 경우 테이블 또는 구체화된 뷰를 생성할 때 사용할 기본 테이블 액세스 방법을 지정합니다. 기본값은 heap입니다.

default_tablespace(string)
이 변수는 CREATE 명령이 명시적으로 테이블스페이스를 지정하지 않을 때 객체(테이블 및 인덱스)를 생성할 기본 테이블스페이스를 지정합니다.

값은 테이블스페이스의 이름이거나 현재 데이터베이스의 기본 테이블스페이스를 사용하여 지정할 빈 문자열입니다.
값이 기존 테이블스페이스의 이름과 일치하지 않으면 PostgreSQL은 자동으로 현재 데이터베이스의 기본 테이블스페이스를 사용합니다.
기본이 아닌 테이블스페이스가 지정된 경우 사용자는 이에 대한 CREATE 권한이 있어야 합니다. 그렇지 않으면 생성 시도가 실패합니다.

이 변수는 임시 테이블에 사용되지 않습니다. 대신 temp_tablespaces가 참조됩니다.
이 변수는 데이터베이스를 생성할 때도 사용되지 않습니다. 기본적으로 새 데이터베이스는 복사된 템플릿 데이터베이스에서 테이블스페이스 설정을 상속합니다.
이 파라미터가 파티션 테이블 생성시 빈 문자열이 아닌 다른 값으로 설정되면 파티션된 테이블의 테이블스페이스는 해당 값으로 설정되며 default_tablespace가 그 이후로 변경되었습니다.

테이블스페이스에 대한 자세한 내용은 22.6절을 참조하십시오.
섹션 22.6: https://www.postgresql.org/docs/12/manage-ag-tablespaces.html

temp_tablespaces(string)
이 변수는 CREATE 명령이 명시적으로 테이블스페이스를 지정하지 않을 때 임시 객체(임시 테이블 및 임시 테이블의 인덱스)를 생성할 테이블스페이스를 지정합니다.
이러한 테이블스페이스에는 대용량 데이터 세트 정렬과 같은 목적을 위한 임시 파일도 생성됩니다.

값은 테이블스페이스의 이름 목록입니다. 목록에 둘 이상의 이름이 있는 경우 PostgreSQL은 임시 개체가 생성될 때마다 목록의 임의 구성원을 선택합니다.
단, 트랜잭션 내에서 연속적으로 생성된 임시 객체는 목록에서 연속적인 테이블스페이스에 배치됩니다.
목록의 선택된 요소가 빈 문자열이면 PostgreSQL은 자동으로 현재 데이터베이스의 기본 테이블스페이스를 대신 사용합니다.

temp_tablespaces가 대화식으로 설정된 경우 존재하지 않는 테이블스페이스를 지정하는 것은 사용자에게 CREATE 권한이 없는 테이블스페이스를 지정하는 것과 마찬가지로 오류입니다.
단, 기존에 설정한 값을 사용하는 경우 존재하지 않는 테이블스페이스는 무시되며, CREATE 권한이 없는 테이블스페이스는 무시됩니다.
특히, 이 규칙은 postgresql.conf에 설정된 값을 사용할 때 적용됩니다.

기본값은 빈 문자열로 현재 데이터베이스의 기본 테이블스페이스에 모든 임시 객체가 생성됩니다.

default_tablespace도 확인하고 관련 문서도 확인 바랍니다.

check_function_bodies(부울)
이 매개변수는 일반적으로 on 입니다. off로 설정하면 CREATE FUNCTION 동안 함수 본문 문자열의 유효성 검사를 비활성화합니다.
유효성 검사를 비활성화하면 유효성 검사 프로세스의 부작용을 피하고 정방향 참조와 같은 문제로 인한 오탐을 피할 수 있습니다.
다른 사용자를 대신하여 기능을 로드하기 전에 이 매개변수를 off로 설정하세요. pg_dump는 자동으로 그렇게 합니다.

default_transaction_isolation(열거형)
각 SQL 트랜잭션에는 "확약되지 않은 읽기", "확정된 읽기", "반복 가능한 읽기" 또는 "직렬화 가능"일 수 있는 격리 수준이 있습니다.
이 매개변수는 각 새 트랜잭션의 기본 격리 수준을 제어합니다. 기본값은 "read committed"입니다.

Consult Chapter 13 and SET TRANSACTION for more information.
Chapter 13 : https://www.postgresql.org/docs/12/mvcc.html

자세한 내용은 13장 및 SET TRANSACTION을 참조하십시오.
13장 : https://www.postgresql.org/docs/12/mvcc.html

default_transaction_read_only(boolean)
읽기 전용 SQL 트랜잭션은 비임시 테이블을 변경할 수 없습니다. 이 매개변수는 각 새 트랜잭션의 기본 읽기 전용 상태를 제어합니다. 기본값은 off(read/write)입니다.

자세한 내용은 SET TRANSACTION을 참조하세요.

default_transaction_deferrable(boolean)
직렬화 가능한 격리 수준에서 실행할 때 지연 가능한 읽기 전용 SQL 트랜잭션이 진행되기 전에 지연될 수 있습니다.
그러나 일단 실행을 시작하면 직렬성을 보장하는 데 필요한 오버헤드가 발생하지 않습니다.
따라서 직렬화 코드는 동시 업데이트로 인해 강제로 중단할 이유가 없으므로 이 옵션을 장기 실행 읽기 전용 트랜잭션에 적합하게 만듭니다.

이 매개변수는 각 새 트랜잭션의 기본 연기 가능 상태를 제어합니다.
현재 읽기-쓰기 트랜잭션이나 직렬화 가능보다 낮은 격리 수준에서 작동하는 트랜잭션에는 영향을 미치지 않습니다. 기본값은 off 입니다.

자세한 내용은 SET TRANSACTION을 참조하세요.

session_replication_role(enum)
현재 세션에 대한 복제 관련 트리거 및 규칙의 실행을 제어합니다. 이 변수를 설정하려면 수퍼유저 권한이 필요하며 이전에 캐시된 쿼리 계획이 삭제됩니다.
가능한 값은 원본(기본값), 복제본 및 로컬입니다.

이 설정의 의도된 용도는 논리적 복제 시스템이 복제된 변경 사항을 적용할 때 복제로 설정하는 것입니다.
그 효과는 트리거와 규칙(기본 구성에서 변경되지 않은)이 복제본에서 실행되지 않는다는 것입니다. 자세한 내용은 ALTER TABLE 절 ENABLE TRIGGER 및 ENABLE RULE을 참조하세요.

PostgreSQL은 설정 원본과 로컬을 내부적으로 동일하게 취급합니다. 타사 복제 시스템은 내부 목적으로 이 두 값을 사용할 수 있습니다.
예를 들어 로컬을 사용하여 변경 사항이 복제되지 않아야 하는 세션을 지정할 수 있습니다.

외래 키가 트리거로 구현되기 때문에 이 매개변수를 복제로 설정하면 모든 외래 키 검사도 비활성화되어 부적절하게 사용되는 경우 데이터가 일관성 없는 상태로 남을 수 있습니다.

statement_timeout(integer)
지정된 시간보다 오래 걸리는 명령문을 중단합니다. log_min_error_statement가 ERROR 이하로 설정되면 타임아웃된 문장도 기록된다.
이 값이 단위 없이 지정되면 밀리초로 간주됩니다. 값 0(기본값)은 시간 초과를 비활성화합니다.

시간 초과는 명령이 서버에 도착한 시간부터 서버에서 완료될 때까지 측정됩니다.
확장 쿼리 프로토콜에서 쿼리 관련 메시지(Parse, Bind, Execute, Describe)가 도착하면 타임아웃이 실행되기 시작하고 Execute 또는 Sync 메시지가 완료되면 타임아웃이 취소됩니다.

모든 세션에 영향을 미치므로 postgresql.conf에서 statement_timeout을 설정하는 것은 권장되지 않습니다.

idle_in_transaction_session_timeout(integer)
지정된 시간보다 오랫동안 유휴 상태였던 열린 트랜잭션이 있는 세션을 종료합니다. 이렇게 하면 해당 세션이 보유하고 있는 잠금을 해제하고 연결 슬롯을 재사용할 수 있습니다.
또한 이 트랜잭션에서만 볼 수 있는 튜플을 진공 처리할 수 있습니다. 이에 대한 자세한 내용은 섹션 24.1을 참조하십시오.
섹션 24.1: https://www.postgresql.org/docs/12/routine-vacuuming.html

이 값이 단위 없이 지정되면 밀리초로 간주됩니다. 값 0(기본값)은 시간 초과를 비활성화합니다.

vacuum_freeze_table_age(integer)
VACUUM은 테이블의 pg_class.relfrozenxid 필드가 이 설정에서 지정한 기간에 도달한 경우 적극적인 스캔을 수행합니다.
적극적인 스캔은 데드 튜플을 포함할 수 있는 페이지뿐만 아니라 고정되지 않은 XID 또는 MXID를 포함할 수 있는 모든 페이지를 방문한다는 점에서 일반 VACUUM과 다릅니다.
기본값은 1억 5천만 트랜잭션(150 million transactions)입니다.
사용자가 이 값을 0에서 20억(two billions)까지 설정할 수 있지만 VACUUM은 유효 값을 autovacuum_freeze_max_age의 95%로 자동으로 제한하여
테이블에 대해 anti-wraparound autovacuum이 시작되기 전에 주기적 수동 VACUUM이 실행될 기회를 갖습니다. 자세한 내용은 섹션 24.1.5를 참조하세요.
섹션 24.1.5. : https://www.postgresql.org/docs/12/routine-vacuuming.html#VACUUM-FOR-WRAPAROUND

vacuum_freeze_min_age(integer)
VACUUM이 테이블을 스캔하는 동안 행 버전을 고정할지 여부를 결정하는 데 사용해야 하는 컷오프 기간(트랜잭션 내)을 지정합니다.
기본값은 5천만(50 million) 건의 트랜잭션입니다. 사용자가 이 값을 0에서 10억(one billion)까지 설정할 수 있지만
VACUUM은 autovacuums 사이에 부당하게 짧은 시간이 없도록 자동으로 유효 값을 autovacuum_freeze_max_age 값의 절반으로 제한합니다.
자세한 내용은 섹션 24.1.5를 참조하십시오.
섹션 24.1.5. : https://www.postgresql.org/docs/12/routine-vacuuming.html#VACUUM-FOR-WRAPAROUND

vacuum_multixact_freeze_table_age(integer)
VACUUM은 테이블의 pg_class.relminmxid 필드가 이 설정에서 지정한 기간에 도달한 경우 적극적인 스캔을 수행합니다.
적극적인 스캔은 데드 튜플을 포함할 수 있는 페이지뿐만 아니라 고정되지 않은 XID 또는 MXID를 포함할 수 있는 모든 페이지를 방문한다는 점에서 일반 VACUUM과 다릅니다.
기본값은 1억 5천만 개의 multixact입니다.
사용자가 이 값을 0에서 20억 사이로 설정할 수 있지만 VACUUM은 자동으로 유효 값을 autovacuum_multixact_freeze_max_age의 95%로 제한하므로
테이블에 대해 안티 랩어라운드가 시작되기 전에 주기적 수동 VACUUM이 실행될 수 있습니다. 자세한 내용은 섹션 24.1.5.1을 참조하십시오.
섹션 24.1.5.1: https://www.postgresql.org/docs/12/routine-vacuuming.html#VACUUM-FOR-MULTIXACT-WRAPAROUND

vacuum_multixact_freeze_min_age(integer)
VACUUM이 테이블을 스캔하는 동안 multixact ID를 최신 트랜잭션 ID로 바꿀지 아니면 multixact ID로 바꿀지 결정하는데 사용해야 하는 컷오프 기간(multixact에서)을 지정합니다.
기본값은 500만 multixact입니다. 사용자가 이 값을 0에서 10억 사이로 설정할 수 있지만
VACUUM은 자동 진공 사이에 부당하게 짧은 시간이 없도록 유효 값을 autovacuum_multixact_freeze_max_age 값의 절반으로 제한합니다. 자세한 내용은 섹션 24.1.5.1을 참조하십시오.
섹션 24.1.5.1: https://www.postgresql.org/docs/12/routine-vacuuming.html#VACUUM-FOR-MULTIXACT-WRAPAROUND

vacuum_cleanup_index_scale_factor(floating point)
VACUUM 정리 단계에서 인덱스 스캔을 일으키지 않고 삽입할 수 있는 이전 통계 콜렉션에서 계산된 총 힙 튜플(heap tuples) 수의 비율을 지정합니다.
이 설정은 현재 B-트리 인덱스에만 적용됩니다.

힙에서 삭제된 튜플이 없는 경우 B-트리 인덱스는 VACUM 정리 단계에서 인덱스 통계가 오래된 상태이거나 정리 중에 재사용할 수 있는 삭제된 페이지가 포함된 경우 계속 검사됩니다.
새로 삽입된 튜플 수가 이전 통계 수집에서 탐지된 총 힙 튜플 수의 vacuum_cleanup_index_scale_factor fraction을 초과할 경우 인덱스 통계는 오래된 것으로 간주됩니다.
총 힙 튜플 수는 인덱스 메타 페이지에 저장됩니다.
VACUM이 데드 튜플을 찾을 때까지 메타 페이지에 이 데이터가 포함되지 않으므로 정리 단계에서 B-트리 인덱스 스캔은 두 번째 및 이후 VACUM 사이클이 데드 튜플을 감지하지 않는 경우에만 건너뛸 수 있습니다.

값의 범위는 0에서 10000000000입니다. vacuum_cleanup_index_scale_factor가 0으로 설정되면 VACUUM 정리 중에 인덱스 스캔을 건너뛰지 않습니다.
기본값은 0.1입니다.

bytea_output(enum)
bytea 유형의 값에 대한 출력 형식을 설정합니다. 유효한 값은 16진수(기본값) 및 이스케이프(기존 PostgreSQL 형식)입니다.
자세한 내용은 섹션 8.4를 참조하십시오. 바이트 유형은 이 설정에 관계없이 항상 입력 시 두 형식을 모두 허용합니다.
섹션 8.4: https://www.postgresql.org/docs/12/datatype-binary.html

xmlbinary(enum)
바이너리 값을 XML로 인코딩하는 방법을 설정합니다. 이것은 예를 들어 xmlelement 또는 xmlforest 함수에 의해 바이트 값이 XML로 변환될 때 적용됩니다.
가능한 값은 XML 스키마 표준에 정의된 base64 및 16진수입니다. 기본값은 base64입니다. XML 관련 기능에 대한 자세한 내용은 9.14절을 참조하십시오.
섹션 9.14: https://www.postgresql.org/docs/12/functions-xml.html

여기서 실제 선택은 대부분 취향의 문제이며 클라이언트 응용 프로그램의 가능한 제한에 의해서만 제한됩니다.
두 방법 모두 가능한 모든 값을 지원하지만 16진수 인코딩은 base64 인코딩보다 약간 더 큽니다.

xmloption(enum)
XML과 문자열 값 사이를 변환할 때 DOCUMENT 또는 CONTENT가 암시적인지 여부를 설정합니다. 이에 대한 설명은 8.13절을 참조하십시오.
유효한 값은 DOCUMENT 및 CONTENT입니다. 기본값은 콘텐츠입니다.
섹션 8.13: https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-FLOAT

SQL 표준에 따르면 이 옵션을 설정하는 명령은 다음과 같습니다.

SET XML OPTION { DOCUMENT | CONTENT };
이 구문은 PostgreSQL에서도 사용할 수 있습니다.

gin_pending_list_limit(integer)
fastupdate가 활성화될 때 사용되는 GIN 인덱스의 보류 목록의 최대 크기를 설정합니다.
목록이 이 최대 크기보다 커지면 목록의 항목을 인덱스의 기본 GIN 데이터 구조로 대량으로 이동하여 정리됩니다.
이 값이 단위 없이 지정되면 킬로바이트로 간주됩니다. 기본값은 4MB(4MB)입니다. 인덱스 저장 매개변수를 변경하여 개별 GIN 인덱스에 대해 이 설정을 무시할 수 있습니다.
자세한 내용은 섹션 66.4.1 및 섹션 66.5를 참조하십시오.
섹션 66.4.1: https://www.postgresql.org/docs/12/gin-implementation.html#GIN-FAST-UPDATE
섹션 66.5: https://www.postgresql.org/docs/12/gin-tips.html

◼︎ 로케일 및 서식
DateStyle (string)
날짜 및 시간 값의 표시 형식과 모호한 날짜 입력 값을 해석하기 위한 규칙을 설정합니다.
역사적 이유로 이 변수에는 출력 형식 사양(ISO, Postgres, SQL 또는 독일어)과 년/월/일 순서 지정을 위한 입력/출력 사양(DMY, MDY 또는 YMD)의
두 가지 독립적인 구성 요소가 포함되어 있습니다. 이들은 별도로 또는 함께 설정할 수 있습니다. 키워드 Euro 및 European은 DMY의 동의어입니다.
키워드 US, NonEuro 및 NonEuropean은 MDY의 동의어입니다. 자세한 내용은 8.5절을 참조하십시오.
Built-in 기본값은 ISO, MDY이지만 initdb는 선택한 lc_time 로케일의 동작에 해당하는 설정으로 구성 파일을 초기화합니다.
섹션 8.5: https://www.postgresql.org/docs/12/datatype-datetime.html

IntervalStyle(enum)
간격 값의 표시 형식을 설정합니다. sql_standard 값은 SQL 표준 간격 리터럴과 일치하는 출력을 생성합니다.
Postgres(기본값) 값은 DateStyle 매개변수가 ISO로 설정된 경우 8.4 이전의 PostgreSQL 릴리스와 일치하는 출력을 생성합니다.
Postgres_verbose 값은 DateStyle 매개변수가 비 ISO 출력으로 설정된 경우 8.4 이전의 PostgreSQL 릴리스와 일치하는 출력을 생성합니다.
iso_8601 값은 ISO 8601의 섹션 4.4.3.2에 정의된 "지정자가 있는 형식" 시간 간격과 일치하는 출력을 생성합니다.

IntervalStyle 매개변수는 모호한 간격 입력의 해석에도 영향을 줍니다. 자세한 내용은 섹션 8.5.4를 참조하십시오.
https://www.postgresql.org/docs/12/datatype-datetime.html#DATATYPE-INTERVAL-INPUT

TimeZone(string)
타임스탬프를 표시하고 해석하기 위한 표준 시간대를 설정합니다. 기본 제공 기본값은 GMT이지만 일반적으로 postgresql.conf에서 재정의됩니다.
initdb는 시스템 환경에 해당하는 설정을 설치합니다. 자세한 내용은 섹션 8.5.3을 참조하십시오.
섹션 8.5.3 : https://www.postgresql.org/docs/12/datatype-datetime.html#DATATYPE-TIMEZONES

timezone_abbreviations(string)
날짜/시간 입력에 대해 서버에서 허용할 표준 시간대 약어 모음을 설정합니다. 기본값은 대부분의 세계에서 작동하는 모음인 'Default'입니다.
'Australia'와 'India'도 있으며 특정 설치에 대해 다른 컬렉션을 정의할 수 있습니다. 자세한 내용은 섹션 B.4를 참조하십시오.
섹션 B.4: https://www.postgresql.org/docs/12/datetime-config-files.html

extra_float_digits(integer)
이 매개변수는 float4, float8 및 기하 데이터 유형을 포함하여 부동 소수점(floating-point ) 값의 텍스트 출력에 사용되는 자릿수를 조정합니다.

값이 1(default)이거나 이상인 경우 부동 소수점 값은 가장 정확한 형식으로 출력됩니다. 섹션 8.1.3을 참조하십시오.
생성된 실제 자릿수는 이 매개변수의 값이 아니라 출력되는 값에만 의존합니다. float8 값에는 최대 17자리가 필요하고 float4 값에는 9자리가 필요합니다.
이 형식은 빠르고 정확하며 올바르게 읽을 때 원래의 이진 부동 소수점 값을 그대로 유지합니다. 기록 호환성을 위해 최대 3개의 값이 허용됩니다.
섹션 8.1.3 : https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-FLOAT

값이 0이거나 음수이면 출력은 지정된 소수 자릿수로 반올림됩니다. 사용된 정밀도는 이 매개변수의 값에 따라 감소된 유형(적절한 경우 FLT_DIG 또는 DBL_DIG)의 표준 자릿수입니다.
(예를 들어 -1을 지정하면 float4 값이 5자리 유효 숫자로 반올림되고 float8 값이 14자리 숫자로 반올림됩니다.)
이 형식은 속도가 느리고 이진 부동 소수점 값의 모든 비트를 보존하지 않지만 사람이 더 쉽게 읽을 수 있습니다.

노트
이 매개변수의 의미와 기본값은 PostgreSQL 12에서 변경되었습니다. 추가 논의는 섹션 8.1.3을 참조하십시오.
섹션 8.1.3 : https://www.postgresql.org/docs/12/datatype-numeric.html#DATATYPE-FLOAT

client_encoding(문자열)
클라이언트 측 인코딩(문자 집합)을 설정합니다. 기본값은 데이터베이스 인코딩을 사용하는 것입니다. PostgreSQL 서버에서 지원하는 문자 집합은 23.3.1절에 설명되어 있습니다.
23.3.1. : https://www.postgresql.org/docs/12/multibyte.html#MULTIBYTE-CHARSET-SUPPORTED

lc_messages(string)
메시지가 표시되는 언어를 설정합니다. 허용되는 값은 시스템에 따라 다릅니다. 자세한 내용은 섹션 23.1을 참조하십시오.
이 변수가 빈 문자열(기본값)로 설정되면 값은 시스템에 따라 서버의 실행 환경에서 상속됩니다.
섹션 23.1 : https://www.postgresql.org/docs/12/locale.html

일부 시스템에서는 이 로케일 범주가 존재하지 않습니다. 이 변수를 설정하면 계속 작동하지만 아무 효과가 없습니다.
또한 원하는 언어로 번역된 메시지가 없을 수도 있습니다. 이 경우 영어 메시지가 계속 표시됩니다.

수퍼유저만 이 설정을 변경할 수 있습니다. 이 설정은 서버 로그와 클라이언트로 전송되는 메시지에 영향을 미치고 값이 부적절하면 서버 로그의 가독성을 가릴 수 있기 때문입니다.

lc_monetary(string)
to_char 함수 제품군과 같이 화폐 금액(monetary amounts)을 형식화하는 데 사용할 로케일을 설정합니다.
허용되는 값은 시스템에 따라 다릅니다. 자세한 내용은 섹션 23.1을 참조하십시오. 이 변수가 빈 문자열(기본값)로 설정되면 값은 시스템에 따라 서버의 실행 환경에서 상속됩니다.
섹션 23.1 : https://www.postgresql.org/docs/12/locale.html

lc_numeric(string)
예를 들어 to_char 함수 제품군과 함께 숫자 형식 지정에 사용할 로케일을 설정합니다. 허용되는 값은 시스템에 따라 다릅니다.
자세한 내용은 섹션 23.1을 참조하십시오. 이 변수가 빈 문자열(기본값)로 설정되면 값은 시스템에 따라 서버의 실행 환경에서 상속됩니다.
섹션 23.1 : https://www.postgresql.org/docs/12/locale.html

lc_time(문자열)
예를 들어 to_char 함수 제품군과 함께 날짜 및 시간 형식 지정에 사용할 로케일을 설정합니다. 허용되는 값은 시스템에 따라 다릅니다.
자세한 내용은 섹션 23.1을 참조하십시오. 이 변수가 빈 문자열(기본값)로 설정되면 값은 시스템에 따라 서버의 실행 환경에서 상속됩니다.
섹션 23.1 : https://www.postgresql.org/docs/12/locale.html

default_text_search_config(문자열)
구성을 지정하는 명시적 인수가 없는 텍스트 검색 기능의 변형에서 사용하는 텍스트 검색 구성을 선택합니다. 자세한 내용은 12장을 참조하십시오.
기본 제공 기본값은 pg_catalog.simple이지만 initdb는 해당 로케일과 일치하는 구성을 식별할 수 있는 경우 선택한 lc_ctype 로케일에 해당하는 설정으로 구성 파일을 초기화합니다.
12장 : https://www.postgresql.org/docs/12/textsearch.html

◼︎ 공용 라이브러시 사전 로딩
추가 기능을 로드하거나 성능 이점을 얻기 위해 공유 라이브러리를 서버에 미리 로드하는 데 몇 가지 설정을 사용할 수 있습니다.
예를 들어, '$libdir/mylib'로 설정하면 mylib.so(또는 일부 플랫폼에서는 mylib.sl)가 설치의 표준 라이브러리 디렉토리에서 미리 로드됩니다.
설정 간의 차이점은 적용되는 시기와 설정을 변경하는 데 필요한 권한입니다.

PostgreSQL 절차 언어 라이브러리는 일반적으로 XXX가 pgsql, perl, tcl 또는 python인 '$libdir/plXXX' 구문을 사용하여 이러한 방식으로 사전 로드할 수 있습니다.

PostgreSQL과 함께 사용하도록 특별히 의도된 공유 라이브러리만 이 방법으로 로드할 수 있습니다.
모든 PostgreSQL 지원 라이브러리에는 호환성을 보장하기 위해 검사되는 "매직 블록"이 있습니다.
이러한 이유로 PostgreSQL이 아닌 라이브러리는 이러한 방식으로 로드할 수 없습니다. 이를 위해 LD_PRELOAD와 같은 운영 체제 기능을 사용할 수 있습니다.

일반적으로 해당 모듈을 로드하는 권장 방법은 특정 모듈의 설명서를 참조하십시오.

local_preload_libraries(string)
이 변수는 연결 시작시 사전 로드될 하나 이상의 공유 라이브러리를 지정합니다. 여기에는 쉼표로 구분된 라이브러리 이름 목록이 포함되며, 여기서 각 이름은 LOAD 명령에 대해 해석됩니다.
항목 사이의 공백은 무시됩니다. 이름에 공백이나 쉼표를 포함해야 하는 경우 라이브러리 이름을 큰따옴표로 묶습니다.
매개변수 값은 연결 시작시에만 적용됩니다. 이후의 변경 사항은 영향을 미치지 않습니다. 지정된 라이브러리를 찾을 수 없으면 연결 시도가 실패합니다.

이 옵션은 모든 사용자가 설정할 수 있습니다. 그 때문에 로드할 수 있는 라이브러리는 설치 표준 라이브러리 디렉토리의 plugins 하위 디렉토리에 나타나는 라이브러리로 제한됩니다.
("안전한" 라이브러리만 거기에 설치되도록 하는 것은 데이터베이스 관리자의 책임입니다.)
local_preload_libraries의 항목은 이 디렉토리를 명시적으로 지정하거나(예: $libdir/plugins/mylib), 라이브러리 이름만 지정할 수 있습니다.
mylib는 $libdir/plugins/mylib와 동일한 효과를 가집니다.

					
이 기능의 목적은 권한이 없는 사용자가 명시적 LOAD 명령 없이 디버깅 또는 성능 측정 라이브러리를 특정 세션에 로드할 수 있도록 하는 것입니다.
이를 위해 클라이언트에서 PGOPTIONS 환경 변수를 사용하거나 ALTER ROLE SET을 사용하여 이 매개변수를 설정하는 것이 일반적입니다.

그러나 모듈이 수퍼유저가 아닌 사용자가 이러한 방식으로 사용하도록 특별히 설계되지 않은 경우 일반적으로 사용하기에 올바른 설정이 아닙니다.
대신 session_preload_libraries를 살펴보십시오.

session_preload_libraries(string)
이 변수는 연결 시작시 사전 로드될 하나 이상의 공유 라이브러리를 지정합니다.
여기에는 쉼표로 구분된 라이브러리 이름 목록이 포함되며, 여기서 각 이름은 LOAD 명령에 대해 해석됩니다.
항목 사이의 공백은 무시됩니다. 이름에 공백이나 쉼표를 포함해야 하는 경우 라이브러리 이름을 큰따옴표로 묶습니다.
매개변수 값은 연결 시작시에만 적용됩니다. 이후의 변경 사항은 영향을 미치지 않습니다. 지정된 라이브러리를 찾을 수 없으면 연결 시도가 실패합니다.
수퍼유저만 이 설정을 변경할 수 있습니다.

이 기능의 목적은 명시적인 LOAD 명령이 제공되지 않고 디버깅 또는 성능 측정 라이브러리를 특정 세션에 로드할 수 있도록 하는 것입니다.
예를 들어, 이 매개변수를 ALTER ROLE SET로 설정하여 지정된 사용자 이름 아래의 모든 세션에 대해 auto_explain을 활성화할 수 있습니다.
또한 이 매개변수는 서버를 다시 시작하지 않고도 변경할 수 있으므로(변경 사항은 새 세션이 시작될 때만 적용됨) 모든 세션에 적용해야 하는 경우에도 이 방법으로 새 ​​모듈을 추가하는 것이 더 쉽습니다.

shared_preload_libraries와 달리 라이브러리를 처음 사용할 때가 아니라 세션 시작 시 로드하는 것이 성능상의 큰 이점은 없습니다.
그러나 연결 풀링을 사용하면 몇 가지 이점이 있습니다.

shared_preload_libraries(string)
이 변수는 서버 시작 시 미리 로드할 하나 이상의 공유 라이브러리를 지정합니다. 여기에는 쉼표로 구분된 라이브러리 이름 목록이 포함되며, 여기서 각 이름은 LOAD 명령에 대해 해석됩니다.
항목 사이의 공백은 무시됩니다. 이름에 공백이나 쉼표를 포함해야 하는 경우 라이브러리 이름을 큰따옴표로 묶습니다. 이 매개변수는 서버 시작 시에만 설정할 수 있습니다.
지정된 라이브러리를 찾을 수 없으면 서버가 시작되지 않습니다.

일부 라이브러리는 공유 메모리 할당, 경량 잠금 예약 또는 백그라운드 작업자 시작과 같이 포스트마스터 시작 시에만 수행할 수 있는 특정 작업을 수행해야 합니다.
이러한 라이브러리는 이 매개변수를 통해 서버 시작 시 로드되어야 합니다. 자세한 내용은 각 라이브러리의 설명서를 참조하십시오.

다른 라이브러리도 미리 로드할 수 있습니다. 공유 라이브러리를 미리 로드하면 라이브러리를 처음 사용할 때 라이브러리 시작 시간을 피할 수 있습니다.
그러나 해당 프로세스에서 라이브러리를 사용하지 않는 경우에도 각각의 새 서버 프로세스를 시작하는 시간이 약간 늘어날 수 있습니다.
따라서 이 매개변수는 대부분의 세션에서 사용될 라이브러리에만 권장됩니다.
또한 이 매개변수를 변경하려면 서버를 다시 시작해야 하므로 단기 디버깅 작업에 사용하기에 적합한 설정이 아닙니다. 대신 session_preload_libraries를 사용하십시오.

노트
Windows 호스트에서 서버 시작 시 라이브러리를 미리 로드해도 각각의 새 서버 프로세스를 시작하는 데 필요한 시간은 줄어들지 않습니다.
각 서버 프로세스는 모든 사전 로드 라이브러리를 다시 로드합니다.
그러나 shared_preload_libraries는 포스트마스터 시작 시간에 작업을 수행해야 하는 라이브러리의 Windows 호스트에서 여전히 유용합니다.

jit_provider(string)
이 변수는 사용할 JIT 공급자 라이브러리의 이름입니다(섹션 31.4.2 참조). 기본값은 llvmjit입니다. 이 매개변수는 서버 시작 시에만 설정할 수 있습니다.
섹션 31.4.2 : https://www.postgresql.org/docs/12/jit-extensibility.html#JIT-PLUGGABLE

존재하지 않는 라이브러리 설정하면 JIT를 사용할 수 없습니다. JIT 지원을 기본 PostgreSQL과 함께 사용할 수 있습니다.


◼︎ 기타 기본값
dynamic_library_path(string)
동적으로 로드 가능한 모듈을 열어야 하고 CREATE FUNCTION 또는 LOAD 명령에 지정된 파일 이름에 디렉토리 구성 요소가 없는 경우(즉, 이름에 슬래시가 포함되지 않음)
시스템은 이 경로에서 필요한 파일을 검색합니다.

dynamic_library_path의 값은 콜론(Windows의 경우 세미콜론)으로 구분된 절대 디렉토리 경로 목록이어야 합니다.
목록 요소가 특수 문자열 $libdir로 시작하면 컴파일된 PostgreSQL 패키지 라이브러리 디렉토리가 $libdir로 대체됩니다.
여기에 표준 PostgreSQL 배포판에서 제공하는 모듈이 설치됩니다. (이 디렉토리의 이름을 찾으려면 pg_config --pkglibdir을 사용하십시오.) 

예:
dynamic_library_path = '/usr/local/lib/postgresql:/home/my_project/lib:$libdir'

또는 Windows 환경에서:
dynamic_library_path = 'C:\tools\postgresql;H:\my_project\lib;$libdir'

이 매개변수의 기본값은 '$libdir'입니다. 값이 빈 문자열로 설정되면 자동 경로 검색이 해제됩니다.

이 매개변수는 런타임에 수퍼유저에 의해 변경될 수 있지만 그렇게 한 설정은 클라이언트 연결이 끝날 때까지만 유지되므로 이 방법은 개발 목적으로 예약해야 합니다.
이 매개변수를 설정하는 권장 방법은 postgresql.conf 구성 파일에 있습니다.

gin_fuzzy_search_limit(integer)
GIN 인덱스 스캔에 의해 반환된 세트 크기의 소프트 상한. 자세한 내용은 66.5절을 참조하십시오.
섹션 66.5: https://www.postgresql.org/docs/12/gin-tips.html
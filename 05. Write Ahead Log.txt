◼︎ 설정
wal_level (enum)
wal_level은 WAL에 기록되는 정보의 양을 결정합니다. 기본값은 replica이며, 대기 서버에서 읽기 전용 쿼리 실행을 포함하여 WAL 보관 및 복제를 지원하기에 충분한 데이터를 기록합니다. minimal은 충돌 또는 즉시 종료에서 복구하는 데 필요한 정보를 제외한 모든 로깅을 제거합니다. 마지막으로 논리적은 논리적 디코딩을 지원하는 데 필요한 정보를 추가합니다. 각 수준에는 모든 하위 수준에서 기록된 정보가 포함됩니다. 이 매개 변수는 서버 시작시에만 설정할 수 있습니다.

최소 수준으로, 일부 대량 작업의 WAL 로깅은 안전하게 건너뛸 수 있으므로 이러한 작업을 훨씬 빠르게 수행 할 수 있습니다. 이 최적화를 적용할 수 있는 작업은 다음과 같습니다.
CREATE TABLE AS
CREATE INDEX
CLUSTER
동일한 트랜잭션에서 생성되거나 잘린 테이블에 COPY

그러나 최소 WAL에는 기본 백업 및 WAL 로그에서 데이터를 재구성하기에 충분한 정보가 포함되어 있지 않으므로 WAL 보관(archive_mode) 및 스트리밍 복제를 활성화하려면 복제본 이상을 사용해야합니다.
논리적 수준에서는 복제본과 동일한 정보와 WAL에서 논리적 변경 세트를 추출하는데 필요한 정보가 기록됩니다. 논리적 수준을 사용하면 특히 REPLICA IDENTITY FULL에 대해 많은 테이블이 구성되고 많은 UPDATE 및 DELETE 문이 실행되는 경우 WAL 볼륨이 증가합니다.
9.6 이전 릴리스에서 이 매개 변수는 값 archive 및 hot_standby도 허용했습니다. 여전히 허용되지만 복제본에 매핑됩니다.

fsync (boolean)
이 매개 변수가 켜져 있으면 PostgreSQL 서버는 fsync() 시스템 호출 또는 다양한 동등한 메서드를 실행하여 업데이트가 물리적으로 디스크에 기록되는지 확인합니다 (wal_sync_method 참조). 이렇게하면 운영 체제 또는 하드웨어 충돌 후 데이터베이스 클러스터가 일관된 상태로 복구 될 수 있습니다.
fsync를 끄면 종종 성능상의 이점이 있지만 정전 또는 시스템 충돌시 복구할 수 없는 데이터 손상이 발생할 수 있습니다. 따라서 외부 데이터에서 전체 데이터베이스를 쉽게 다시 만들 수 있는 경우에만 fsync를 끄는 것이 좋습니다.
fsync를 해제하기 위한 안전한 상황의 예로는 백업 파일에서 새 데이터베이스 클러스터의 초기 로드, 데이터베이스가 폐기되고 다시 생성되는 데이터 일괄 처리를 위한 데이터베이스 클러스터 사용, 또는 자주 재생성되고 페일오버에 사용되지 않는 읽기 전용 데이터베이스 복제본 사용 등이 있습니다. 고품질 하드웨어만으로는 fsync를 끌 충분한 이유가 되지 않습니다.
fsync 끄기를 켜기로 변경할 때 안정적인 복구를 위해서는 커널의 모든 수정된 버퍼를 내구성 있는 저장소로 강제 적용해야 합니다. 이는 클러스터가 종료되어있는(shutdown) 동안 또는 fsync가 켜져있는 동안 initdb --sync-only를 실행하거나 sync를 실행하거나 파일 시스템을 마운트 해제하거나 서버를 재부팅하여 수행할 수 있습니다.
많은 상황에서 중요하지 않은 트랜잭션에 대해 synchronous_commit을 끄면 데이터 손상의 위험없이 fsync를 끄는 잠재적인 성능 이점을 얻을 수 있습니다.
fsync는 postgresql.conf 파일 또는 서버 명령 줄에서만 설정할 수 있습니다. 이 매개 변수를 끄면 full_page_writes도 끄는 것을 고려하십시오.

synchronous_commit (enum)
데이터베이스 서버가 클라이언트에 "성공"표시를 반환하기 전에 WAL 처리를 완료해야하는 양을 지정합니다. 유효한 값은 remote_apply, on (기본값), remote_write, local 및 off입니다.

synchronous_standby_names가 비어 있으면 의미있는 설정만 설정 및 해제됩니다. remote_apply, remote_write 및 local은 모두 on과 동일한 로컬 동기화 수준을 제공합니다. 모든 non-off 모드의 로컬 동작은 WAL이 디스크로 로컬 플러시가 될때까지 기다리는 것입니다. 오프 모드에서는 대기가 없으므로 클라이언트에 성공이 보고되는 시점과 나중에 트랜잭션이 서버 충돌에 대해 안전하다고 보장되는 시점 사이에 지연이 있을 수 있습니다. (최대 지연은 wal_writer_delay의 3배입니다.) fsync와 달리 이 매개 변수를 off로 설정하면 데이터베이스 불일치 위험이 발생하지 않습니다. 운영 체제 또는 데이터베이스 충돌로 인해 최근에 커밋된 트랜잭션이 손실 될 수 있지만 데이터베이스 상태는 해당 트랜잭션이 완전히 중단된 것과 동일합니다. 따라서 synchronous_commit을 끄는 것은 트랜잭션의 내구성에 대한 정확한 확신보다 성능이 더 중요한 경우 유용한 대안이 될 수 있습니다.
다음페이지를 참고하세요 : https://www.postgresql.org/docs/12/wal-async-commit.html
synchronous_standby_names가 비어 있지 않은 경우 synchronous_commit은 트랜잭션 커밋이 대기 서버에서 WAL 레코드가 처리될 때까지 대기할지 여부도 제어합니다.
remote_apply로 설정했을 때, 커밋은 현재 동기식 standby(s)(스탠바이서버(들))에서 응답한 내용이 트랜잭션의 커밋 레코드를 수신하여 적용했음을 나타낼 때까지 기다리며, standby(s)(스탠바이서버(들))의 쿼리에 표시되도록 하고 standbys(스탠바이서버들)에 지속적으로 스토리지에 쓰이기도 합니다. 이 경우 WAL 재실행(replay)을 기다리기 때문에 이전 설정보다 더 큰 커밋지연이 발생합니다. on으로 설정하면 커밋은 현재 동기식 standby(s)(스탠바이서버(들))에서 응답한 내용이 트랜잭션 커밋 레코드를 수신하여 내구성이 뛰어난 스토리지에 플러시했음을 나타낼 때까지 기다립니다. 이렇게 하면 primary(프리머리 서버)와 모든 동기식 standby(s)(스탠바이서버(들)) 모두 데이터베이스 스토리지가 손상되지 않는 한 트랜잭션이 손실되지 않습니다. remote_write로 설정하면 커밋은 현재 동기식 standby(s)(스탠바이서버(들))에서 응답한 내용이 트랜잭션의 커밋 레코드를 수신하여 파일 시스템에 기록할 때까지 대기합니다. 이 설정은 PostgreSQL의 standby(스탠바이서버) 인스턴스가 충돌하는 경우 데이터 보존을 보장하지만 데이터가 standby(스탠바이서버)의 내구성있는 스토리지에 도달하지 않았기 때문에 standby(스탠바이서버)가 운영 체제 수준 충돌을 겪는 경우에는 그렇지 않습니다. 로컬 설정 때문에 커밋은 로컬 플러시를 Disk에 대기하지만 복제는 대기하지 않습니다. 이것은 일반적으로 동기식 복제가 사용 중인 경우 바람직하지 않지만 완전성을 위해 제공됩니다.
이 파라미터 변수는 언제든지 변경할 수 있습니다`. 한 트랜잭션에 대한 동작은 커밋할 때 적용되는 설정에 따라 결정됩니다. 따라서 일부 트랜잭션은 동기적으로 커밋하고 다른 트랜잭션은 비동기 적으로 커밋하는 것이 가능하고 유용합니다. 예를 들어, 기본값이 반대일 때 단일 다중 명령문 트랜잭션을 비동기적으로 커밋하려면 트랜잭션 내에서 SET LOCAL synchronous_commit TO OFF를 실행합니다.

https://www.postgresql.org/docs/12/runtime-config-wal.html#SYNCHRONOUS-COMMIT-MATRIX
Table 19.1 summarizes the capabilities of the synchronous_commit settings.
Table 19.1. synchronous_commit Modes

synchronous_commit setting	local durable commit	standby durable commit after PG crash	standby durable commit after OS crash	standby query consistency
remote_apply	•	•	•	•
on	•	•	•	 
remote_write	•	•	 	 
local	•	 	 	 
off	 	 	 	 


wal_sync_method (enum)
WAL 업데이트를 디스크로 강제하는데 사용되는 방법입니다. fsync가 꺼져 있으면 WAL 파일 업데이트가 전혀 강제 실행되지 않으므로 이 설정은 관련이 없습니다. 가능한 값은 다음과 같습니다.
-open_datasync (open()옵션 O_DSYNC로 WAL 파일 쓰기)
-fdatasync (각 커밋에서 fdatasync() 호출)
-fsync(각 커밋에서 fsync() 호출)
-fsync_writethrough (각 커밋에서 fsync ()를 호출하여 디스크 쓰기 캐시를 강제로 쓰기(write-through))
-open_sync (open() 옵션 O_SYNC를 사용하여 WAL 파일 쓰기)

open_ * 옵션은 사용이 가능한 경우 O_DIRECT도 사용합니다. 모든 플랫폼에서 이러한 선택 사항을 모두 사용할 수있는 것은 아닙니다. 기본값은 fdatasync가 Linux 및 FreeBSD에서 기본값이라는 점을 제외하고 위 목록에서 플랫폼에서 지원하는 첫 번째 방법입니다. 기본값이 반드시 이상적인 것은 아닙니다. 충돌 방지 구성을 만들거나 최적의 성능을 얻으려면 이 설정 또는 시스템 구성의 다른 측면을 변경해야 할 수 있습니다. 이러한 측면은 섹션 29.1에서 논의됩니다. 이 매개 변수는 postgresql.conf 파일 또는 서버 명령 줄에서만 설정할 수 있습니다.

full_page_writes (boolean)
이 매개 변수가 켜져 있으면 PostgreSQL 서버는 체크 포인트 이후 해당 페이지를 처음 수정하는 동안 각 디스크 페이지의 전체 콘텐츠를 WAL에 기록합니다. 이는 운영 체제 충돌 동안 처리중인 페이지 쓰기가 부분적으로만 완료되어, 이전 데이터와 새 데이터가 혼합된 온 디스크 페이지로 이어질 수 있기 때문에 필요합니다. 일반적으로 WAL에 저장된 행 수준(row-level) 변경 데이터는 충돌 후 복구 중에 이러한 페이지를 완전히 복원하기에 충분하지 않습니다. 전체 페이지 이미지를 저장하면 페이지를 올바르게 복원할 수 있지만 WAL에 기록해야하는 데이터 양이 증가합니다. (WAL 재생은 항상 체크 포인트에서 시작되기 때문에 체크 포인트 이후 각 페이지의 첫 번째 변경시이를 수행하는 것으로 충분합니다. 따라서 전체 페이지 쓰기 비용을 줄이는 한 가지 방법은 체크 포인트 간격 매개 변수를 늘리는 것입니다.)
이 매개 변수를 끄면 일반적으로 작동 속도가 빨라지지만 시스템 장애 후 복구할 수 없는 데이터 손상 또는 인지할 수 없는(silent) 데이터 손상이 발생할 수 있습니다. 위험은 작지만 fsync를 끄는 것과 유사하며 해당 매개 변수에 대해 권장되는 동일한 환경에서만 꺼야합니다.
이 매개 변수를 꺼도 PITR (Point-in-Time Recovery)을 위한 WAL 아카이브 사용에는 영향을주지 않습니다 (섹션 25.3 참조).
이 매개 변수는 postgresql.conf 파일 또는 서버 명령 줄에서만 설정할 수 있습니다. 기본값은 on입니다.

wal_log_hints (boolean)
이 매개 변수가 켜져 있으면 PostgreSQL 서버는 힌트 비트(hint bits)라고 불리우는 중요하지 않은 수정에도 불구하고 체크 포인트 이후 해당 페이지를 처음 수정하는 동안 각 디스크 페이지의 전체 콘텐츠를 WAL에 기록합니다.
데이터 체크섬이 활성화된 경우 힌트 비트 업데이트는 항상 WAL로 기록되며 이 설정은 무시됩니다. 이 설정을 사용하여 데이터베이스에 데이터 체크섬이 활성화된 경우 추가 WAL 로깅이 얼마나 발생하는지 테스트할 수 있습니다.
이 매개 변수는 서버 시작시에만 설정할 수 있습니다. 기본값은 꺼짐입니다.

wal_compression (boolean)
이 매개 변수가 켜져 있으면 PostgreSQL 서버는 full_page_writes가 켜져 있거나 기본 백업 중에 WAL에 기록된 전체 페이지 이미지를 압축합니다. 압축된 페이지 이미지는 WAL 재생 중에 압축이 해제됩니다. 기본값은 off입니다. 수퍼 유저만이 설정을 변경할 수 있습니다.
이 매개 변수를 켜면 복구 불가능한 데이터 손상의 위험을 증가시키지 않고 WAL 볼륨을 줄일 수 있지만 WAL 로깅중 압축 및 WAL 재생중 압축 해제에 약간의 추가 CPU가 소비됩니다.

wal_init_zero (boolean)
on (기본값)으로 설정하고 이 옵션을 사용하면 새 WAL 파일이 0으로 채워집니다. 일부 파일 시스템에서는 WAL 레코드를 작성하기 전에 공간이 할당되도록 합니다. 그러나 COW (Copy-On-Write) 파일 시스템은 이 기술의 이점을 얻지 못할 수 있으므로 불필요한 작업을 건너뛸 수 있는 옵션이 제공됩니다. off로 설정하면 예상 크기를 갖도록 파일이 작성될 때 최종 바이트만 기록됩니다.

wal_recycle (boolean)
on (기본값)으로 설정하면 이 옵션을 사용하면 WAL 파일의 이름을 변경하여 재활용되므로 새 파일을 만들 필요가 없습니다. COW 파일 시스템에서는 새 파일 시스템을 만드는 것이 더 빠를 수 있으므로 이 동작을 비활성화하는 옵션이 제공됩니다.

wal_buffers (integer)
아직 디스크에 기록되지 않은 WAL 데이터에 사용되는 공유 메모리 양입니다. 기본 설정인 -1은 shared_buffers의 1/32nd(약 3%)와 동일한 크기를 선택하지만 64kB 이상이거나 WAL 세그먼트 하나의 크기 (일반적으로 16MB)보다 크지 않습니다. 이 값은 자동 선택이 너무 크거나 너무 작은 경우, 수동으로 설정할 수 있지만 32kB 미만의 양수 값은 32kB로 처리됩니다. 이 값이 단위없이 지정되면 WAL블록, 즉 XLOG_BLCKSZ 바이트(일반적으로 8kB)로 간주됩니다. 이 매개 변수는 서버 시작시에만 설정할 수 있습니다.

WAL 버퍼의 내용은 모든 트랜잭션 커밋시 디스크에 기록되므로, 매우 큰 값은 큰 이점을 제공하지 않을 것입니다. 그러나 이 값을 최소한 몇 MB로 설정하면 많은 클라이언트가 한번에 커밋하는 사용량이 많은 서버에서 쓰기 성능을 향상시킬 수 있습니다. 기본 설정인 -1로 선택된 자동 조정은 대부분의 경우 합리적인 결과를 제공합니다.

wal_writer_delay (integer)
WAL 작성기가 WAL을 플러시하는 빈도를 시간적으로 지정합니다. WAL을 플러시한 후에는 비동기 커밋 트랜잭션에 의해 더 빨리 깨어나지 않는한 wal_writer_delay에 지정된 시간 동안 작성자가 휴면 상태를 유지합니다. 마지막 플러시가 wal_writer_delay 전보다 적게 발생하고 WAL이 생성된 이후 wal_writer_flush_보다 적으면 WAL은 디스크에 플러시되지 않고 운영 체제에만 기록됩니다. 이 값이 단위없이 지정되면 밀리초로 간주됩니다. 기본값은 200 밀리초(200ms)입니다. 많은 시스템에서 절전 지연의 효과적인 해결 방법은 10밀리 초입니다. wal_writer_delay를 10의 배수가 아닌 값으로 설정하면 다음으로 높은 10의 배수로 설정하는 것과 동일한 결과를 얻을 수 있습니다. 이 매개 변수는 postgresql.conf 파일 또는 서버 명령줄에서만 설정할 수 있습니다.

wal_writer_flush_after (integer)
WAL 작성기가 WAL을 플러시하는 빈도를 볼륨 측면에서 지정합니다. 마지막 플러시가 wal_writer_delay 전보다 적게 발생하고 WAL이 생성 된 이후 wal_writer_flush_보다 적으면 WAL은 디스크에 플러시되지 않고 운영 체제에만 기록됩니다. wal_writer_flush_after가 0으로 설정되면 WAL 데이터는 항상 즉시 플러시됩니다. 이 값이 단위없이 지정되면 WAL 블록, 즉 XLOG_BLCKSZ 바이트 (일반적으로 8kB)로 간주됩니다. 기본값은 1MB입니다. 이 매개 변수는 postgresql.conf 파일 또는 서버 명령줄에서만 설정할 수 있습니다.

commit_delay (integer)
commit_delay를 설정하면 WAL 플러시가 시작되기 전에 시간 지연이 추가됩니다. 이렇게 하면 시스템로드가 충분히 높아서 주어진 간격 내에 추가 트랜잭션을 커밋할 수 있는 경우 단일 WAL 플러시를 통해 더 많은수의 트랜잭션을 커밋할 수 있으므로 그룹 커밋 처리량을 향상시킬 수 있습니다. 그러나 각 WAL 플러시에 대해 최대 commit_delay까지 지연 시간이 늘어납니다. 다른 트랜잭션이 커밋할 준비가 되지 않으면 지연이 낭비되기 때문에 플러시가 시작 되려고 할 때 다른 트랜잭션이 적어도 commit_siblings가 활성화된 경우에만 지연이 수행됩니다. 또한 fsync가 비활성화된 경우 지연이 수행되지 않습니다. 이 값이 단위없이 지정되면 마이크로 초로 간주됩니다. 기본 commit_delay는 0(지연 없음)입니다. 수퍼 유저만이 설정을 변경할 수 있습니다.
9.3 이전의 PostgreSQL 릴리스에서 commit_delay는 다르게 동작했으며 훨씬 덜 효과적이었습니다. 모든 WAL 플러시가 아닌 커밋에만 영향을 주며 WAL 플러시가 더 빨리 완료되더라도 전체 구성된 지연을 기다렸습니다. PostgreSQL 9.3부터 플러시 준비가 된 첫 번째 프로세스는 구성된 간격 동안 대기하는 반면 후속 프로세스는 리더가 플러시 작업을 완료할 때까지만 대기합니다.

commit_siblings (integer)
commit_delay 지연을 수행하기 전에 필요한 동시 열린 트랜잭션의 최소수 입니다. 값이 클수록 지연 간격 동안 하나 이상의 다른 트랜잭션이 커밋할 준비가 될 가능성이 높아집니다. 기본값은 5 개의 트랜잭션입니다.

◼︎ Checkpoints
checkpoint_timeout (integer)
자동 WAL 체크 포인트 사이의 최대 시간입니다. 이 값이 단위없이 지정되면 초로 간주됩니다. 유효한 범위는 30 초에서 1 일 사이입니다. 기본값은 5분 입니다. 이 매개 변수를 늘리면 응급 복구에 필요한 시간이 늘어날 수 있습니다. 이 매개 변수는 postgresql.conf 파일 또는 서버 명령 줄에서만 설정할 수 있습니다.

checkpoint_completion_target (floating point)
자동 WAL 체크 포인트 사이의 최대 시간. 이 값이 단위없이 지정되면 초로 간주됩니다. 유효한 범위는 30초에서 1일 사이입니다. 기본값은 5분(5분)입니다. 이 매개 변수를 늘리면 응급 복구에 필요한 시간이 늘어날 수 있습니다. 이 매개 변수는 postgresql.conf 파일 또는 서버 명령 줄에서만 설정할 수 있습니다.

checkpoint_completion_target (부동 소수점)
체크 포인트 사이의 총 시간의 일부로 체크 포인트 완료 대상을 지정합니다. 기본값은 0.5입니다. 이 매개 변수는 postgresql.conf 파일 또는 서버 명령 줄에서만 설정할 수 있습니다.

checkpoint_flush_after (integer)
체크 포인트를 수행하는 동안 지정한 크기 이상의 데이터가 기록될 때마다 OS가 기본 스토리지에 이러한 쓰기를 실행하도록 강제합니다. 이렇게 하면 커널 페이지 캐시의 더티 데이터 양이 제한되어 체크 포인트 끝에서 fsync가 실행되거나 OS가 백그라운드에서 더 큰 일괄 처리로 데이터를 다시 쓸 때 중단될 가능성이 줄어 듭니다. 이는 종종 트랜잭션 지연 시간을 크게 줄이지만 특히 shared_buffers보다 크지만 OS의 페이지 캐시보다 작은 워크로드의 경우 성능이 저하될 수 있는 경우도 있습니다. 이 설정은 일부 플랫폼에 영향을 미치지 않을 수 있습니다. 이 값이 단위없이 지정되면 블록 (BLCKSZ 바이트, 일반적으로 8kB)으로 간주됩니다. 유효한 범위는 강제 쓰기 저장을 비활성화하는 0과 2MB 사이입니다. 기본값은 Linux에서 256kB이고 다른 곳에서는 0입니다. (BLCKSZ가 8kB가 아닌 경우 기본값 및 최대 값은 이에 비례하여 확장됩니다.) 이 매개 변수는 postgresql.conf 파일 또는 서버 명령 줄에서만 설정할 수 있습니다.

checkpoint_warning (integer)
WAL 세그먼트 파일이 채워지는동안 체크 포인트가 이 시간보다 더 가깝게 발생하면 서버 로그에 메시지를 작성합니다 (max_wal_size를 높여야 함을 의미 함). 이 값이 단위없이 지정되면 초로 간주됩니다. 기본값은 30초 입니다. 0은 경고를 비활성화합니다. checkpoint_timeout이 checkpoint_warning보다 작으면 경고가 생성되지 않습니다. 이 매개 변수는 postgresql.conf 파일 또는 서버 명령 줄에서만 설정할 수 있습니다.

max_wal_size (integer)
자동 체크 포인트 중에 WAL이 커질 수있는 최대 크기입니다. 이것은 소프트 한도입니다. WAL 크기는 과부하, archive_command 실패 또는 높은 wal_keep_segments 설정과 같은 특수한 상황에서 max_wal_size를 초과할 수 있습니다. 이 값이 단위없이 지정되면 메가 바이트로 간주됩니다. 기본값은 1GB입니다. 이 매개 변수를 늘리면 응급 복구에 필요한 시간이 늘어날 수 있습니다. 이 매개 변수는 postgresql.conf 파일 또는 서버 명령줄에서만 설정할 수 있습니다.

min_wal_size (integer)
WAL 디스크 사용량이 이 설정 아래로 유지되는 한 이전 WAL 파일은 제거되지 않고 체크 포인트에서 나중에 사용할 수 있도록 항상 재활용됩니다. 이는 대규모 일괄 작업을 실행할 때와 같이 WAL 사용량 급증을 처리하기 위해 충분한 WAL공간을 예약하는 데 사용할 수 있습니다. 이 값이 단위없이 지정되면 메가 바이트로 간주됩니다. 기본값은 80MB입니다. 이 매개 변수는 postgresql.conf 파일 또는 서버 명령줄에서만 설정할 수 있습니다.

◼︎ Archiving
archive_mode (enum)
archive_mode가 활성화되면 완료된 WAL세그먼트는 archive_command를 설정하여 아카이브 스토리지로 전송됩니다. off 외에도 비활성화 모드는 on 과 always 두 가지가 있습니다. 정상 작동 중에는 두 모드 사이에 차이가 없지만 항상 WAL 아카이버를 설정하면 archive recovery 또는 standby 모드 중에도 활성화됩니다. always 모드에서는 아카이브에서 복원되거나 스트리밍 복제로 전송된(streamed)된 모든 파일이 다시 아카이브됩니다.

archive_mode 및 archive_command는 별도의 변수이므로 아카이브 모드를 종료하지 않고도 archive_command를 변경할 수 있습니다. 이 매개 변수는 서버 시작시에만 설정할 수 있습니다. wal_level이 최소로 설정된 경우 archive_mode를 활성화할 수 없습니다.

archive_command (string)
완료된 WAL파일 세그먼트를 보관하기 위해 실행할 로컬 셸 명령입니다. 문자열의 모든 %p는 아카이브 할 파일의 경로 이름으로 대체되고 모든 %f는 파일 이름으로만 대체됩니다. (경로 이름은 서버의 작업 디렉토리, 즉 클러스터의 데이터 디렉토리에 상대적입니다.) 명령에 실제 % 문자를 포함하려면 %%를 사용합니다. 명령이 성공한 경우에만 zero exit 상태를 반환하는 것이 중요합니다.

이 매개 변수는 postgresql.conf 파일 또는 서버 명령 줄에서만 설정할 수 있습니다. 서버 시작시 archive_mode를 활성화하지 않으면 무시됩니다. archive_command가 빈 문자열(기본값) 인 경우 archive_mode가 활성화된 상태에서 WAL 아카이브는 일시적으로 비활성화되지만 서버는 곧 명령이 제공될 것으로 예상하여 계속해서 WAL 세그먼트 파일을 축적합니다. archive_command를 true를 반환하는 명령 (예 : / bin / true (Windows의 경우 REM))으로 설정하면 효과적으로 아카이브가 비활성화되지만 아카이브 복구에 필요한 WAL 파일 체인이 끊어 지므로 비정상적인 상황에서만 사용해야합니다.

archive_timeout (integer)
archive_command는 완료된 WAL 세그먼트에 대해서만 호출됩니다. 따라서 서버가 WAL 트래픽을 거의 생성하지 않는 경우(또는 그렇게하는 지연 기간이있는 경우) 트랜잭션 완료와 아카이브 저장소의 안전한 기록 사이에 긴 지연이 있을 수 있습니다. 보관되지 않은 데이터의 수명을 제한하려면 archive_timeout을 설정하여 서버가 주기적으로 새 WAL 세그먼트 파일로 전환하도록 할 수 있습니다. 이 매개 변수가 0보다 크면 마지막 세그먼트 파일 전환 이후 이 시간이 경과하고 단일 체크 포인트를 포함한 데이터베이스 활동이있을 때마다 서버가 새 세그먼트 파일로 전환합니다 (데이터베이스가 활동이 없을경우 체크 포인트를 건너 뜁니다). 강제 전환으로 인해 조기에 닫힌 아카이브 파일은 여전히 ​​완전히 전체 파일과 길이가 같습니다. 따라서 매우 짧은 archive_timeout을 사용하는 것은 적절치 않습니다. 만약 짧은 시간으로 가져갈 경우 아카이브 스토리지를 팽창시킵니다. 보통 1분 정도의 archive_timeout 설정이 적절합니다. 마스터 서버에서 데이터를 더 빨리 복사하려면 보관하는 대신 스트리밍 복제 사용을 고려해야합니다. 이 값이 단위없이 지정되면 초로 간주됩니다. 이 매개 변수는 postgresql.conf 파일 또는 서버 명령 줄에서만 설정할 수 있습니다.

◼︎ Archive Recovery
이 섹션에서는 복구 기간에만 적용되는 설정에 대해 설명합니다. 수행하려는 후속 복구를 위해 재설정해야합니다.

"복구"는 서버를 standby로 사용하거나 대상 복구를 실행하는 것을 다룹니다. 일반적으로 standby 모드는 고 가용성 및/또는 읽기 확장 성을 제공하는 데 사용되는 반면 대상 복구는 데이터 손실에서 복구하는 데 사용됩니다.

standby 모드에서 서버를 시작하려면 데이터 디렉터리에 standby.signal이라는 파일을 만듭니다. 서버는 복구에 들어가고 아카이브된 WAL의 끝에 도달해도 복구를 중지하지 않지만 primary_conninfo 설정에 지정된대로 송신 서버에 연결하거나 restore_command를 사용하여 새 WAL 세그먼트를 가져 와서 복구를 계속합니다.
이 모드의 경우이 섹션과 섹션 19.6.3의 매개 변수가 중요합니다. 19.5.5 절의 매개 변수도 적용되지만 일반적으로이 모드에서는 유용하지 않습니다.
19.6.3 : https://www.postgresql.org/docs/12/runtime-config-replication.html#RUNTIME-CONFIG-REPLICATION-STANDBY
19.5.5 : https://www.postgresql.org/docs/12/runtime-config-wal.html#RUNTIME-CONFIG-WAL-RECOVERY-TARGET

대상 복구 모드에서 서버를 시작하려면 데이터 디렉터리에 recovery.signal이라는 파일을 만듭니다. standby.signal 및 recovery.signal 파일이 모두 생성되면 대기 모드가 우선합니다. 아카이브 된 WAL이 완전히 재생되거나 recovery_target에 도달하면 대상 복구 모드가 종료됩니다. 이 모드에서는이 섹션과 섹션 19.5.5의 매개 변수가 모두 사용됩니다.
19.5.5 : https://www.postgresql.org/docs/12/runtime-config-wal.html#RUNTIME-CONFIG-WAL-RECOVERY-TARGET

restore_command (string)
WAL 파일 시리즈의 보관된 세그먼트를 검색하기 위해 실행할 로컬 셸 명령입니다. 이 매개 변수는 아카이브 복구에 필요하지만 스트리밍 복제에는 선택 사항입니다. 문자열의 모든 %f는 아카이브에서 검색 할 파일의 이름으로 대체되고 모든 %p는 서버의 복사 대상 경로 이름으로 대체됩니다. (경로 이름은 현재 작업 디렉토리, 즉 클러스터의 데이터 디렉토리에 상대적입니다.) 모든 %r은 마지막으로 유효한 재시작 지점을 포함하는 파일 이름으로 대체됩니다. 이 파일은 복원을 다시 시작할 수 있도록 유지해야하는 가장 오래된 파일이므로 이 정보를 사용하여 현재 복원에서 다시 시작을 지원하는데 필요한 최소 수준으로 아카이브를 자를 수 있습니다. %r은 일반적으로 웜 대기 구성에서만 사용됩니다(섹션 26.2 참조 : https://www.postgresql.org/docs/12/warm-standby.html). 실제 %문자를 포함하려면 %%를 씁니다.
명령이 성공한 경우에만 0 종료 상태를 반환하는 것이 중요합니다. 명령은 아카이브에없는 파일 이름을 요청합니다. 그렇게 요청하면 0이 아닌 값을 반환해야합니다. 예 :
restore_command = 'cp /mnt/server/archivedir/%f "%p"'
restore_command = 'copy "C:\\server\\archivedir\\%f" "%p"'  # Windows
예외는 명령이 신호 (데이터베이스 서버 종료의 일부로 사용되는 SIGTERM 제외) 또는 쉘에 의한 오류 (예 : 명령을 찾을 수 없음)에 의해 종료된 경우 복구가 중단되고 서버가 시작되지 않습니다.
이 매개 변수는 서버 시작시에만 설정할 수 있습니다.

archive_cleanup_command (string)
이 선택적 매개 변수는 모든 재시작 지점에서 실행될 쉘 명령을 지정합니다. archive_cleanup_command의 목적은 대기 서버에서 더 이상 필요하지 않은 오래된 아카이브 WAL 파일을 정리하는 메커니즘을 제공하는 것입니다. 모든 %r은 마지막으로 유효한 재시작 지점을 포함하는 파일의 이름으로 대체됩니다. 이 파일은 복원을 다시 시작할 수 있도록 유지해야하는 가장 오래된 파일이므로 %r 이전의 모든 파일을 안전하게 제거 할 수 있습니다. 이 정보는 현재 복원에서 다시 시작을 지원하는 데 필요한 최소 수준으로 아카이브를 자르는 데 사용할 수 있습니다. pg_archivecleanup 모듈은 단일 대기 구성을 위해 archive_cleanup_command에서 자주 사용됩니다. 예를 들면 다음과 같습니다.
archive_cleanup_command = 'pg_archivecleanup /mnt/server/archivedir %r'
그러나 여러 대기 서버가 동일한 아카이브 디렉토리에서 복원중인 경우 서버에서 더 이상 필요하지 않을 때까지 WAL 파일을 삭제하지 않도록해야 합니다. archive_cleanup_command는 일반적으로 웜 대기 구성에서 사용됩니다 (섹션 26.2 참조 : https://www.postgresql.org/docs/12/warm-standby.html). 명령에 실제 %문자를 포함하려면 %%를 씁니다.
명령이 0이 아닌 종료 상태를 반환하면 경고 로그 메시지가 기록됩니다. 예외는 명령이 신호 또는 쉘에 의한 오류 (예 : 명령을 찾을 수 없음)에 의해 종료된 경우 치명적인 오류가 발생한다는 것입니다.
이 매개 변수는 postgresql.conf 파일 또는 서버 명령줄에서만 설정할 수 있습니다.

recovery_end_command (string)
이 매개 변수는 복구가 끝날 때만 한번만 실행되는 셸 명령을 지정합니다. 이 매개 변수는 선택 사항입니다. recovery_end_command의 목적은 복제 또는 복구 후 정리를 위한 메커니즘을 제공하는 것입니다. 모든 %r은 archive_cleanup_command 에서처럼 마지막으로 유효한 재시작 지점을 포함하는 파일의 이름으로 대체됩니다.
명령이 0이 아닌 종료 상태를 반환하면 경고 로그 메시지가 기록되고 데이터베이스는 계속 시작됩니다. 예외는 명령이 신호 또는 쉘의 오류 (예 : 명령을 찾을 수 없음)에 의해 종료된 경우 데이터베이스가 시작을 진행하지 않는다는 것입니다.
이 매개 변수는 postgresql.conf 파일 또는 서버 명령 줄에서만 설정할 수 있습니다.

◼︎ Recovery Target
기본적으로 복구는 WAL 로그의 끝까지 복구됩니다. 다음 매개 변수를 사용하여 이전 중지 지점을 지정할 수 있습니다. recovery_target, recovery_target_lsn, recovery_target_name, recovery_target_time 또는 recovery_target_xid 중 하나만 사용할 수 있습니다. 구성 파일에 둘 이상이 지정되면 오류가 발생합니다. 이러한 매개 변수는 서버 시작시에만 설정할 수 있습니다.

recovery_target = 'immediate'
이 매개 변수는 일관된 상태에 도달하는 즉시, 즉 가능한 한 빨리 복구를 종료하도록 지정합니다. 온라인 백업에서 복원할 때 이는 백업 수행이 종료된 지점을 의미합니다.
기술적으로 이것은 문자열 매개 변수이지만 현재 'immediate'만 허용되는 값입니다.

recovery_target_name (string)
This parameter specifies the named restore point (created with pg_create_restore_point()) to which recovery will proceed.
이 매개 변수는 복구가 진행될 명명 된 복원 지점 (pg_create_restore_point ()으로 생성됨)을 지정합니다.

recovery_target_time (timestamp)
이 매개 변수는 복구가 진행될 시간 스탬프를 지정합니다. 정확한 중지 지점도 recovery_target_inclusive의 영향을받습니다.
이 매개 변수의 값은 시간대 약어를 사용할 수 없다는 점을 제외하고 시간대 데이터 유형이 있는 시간 소인에서 허용하는 동일한 형식의 시간 소인입니다 (구성 파일에서 timezone_abbreviations 변수가 이전에 설정되지 않은 경우). 선호하는 스타일은 UTC의 숫자 오프셋을 사용하는 것입니다. 또는 전체 시간대 이름을 작성할 수 있습니다 (예 : EEST가 아닌 Europe / Helsinki).

recovery_target_xid (string)
이 매개 변수는 복구가 진행될 트랜잭션 ID를 지정합니다. 트랜잭션 ID는 트랜잭션 시작시 순차적으로 할당되지만 트랜잭션은 다른 숫자 순서로 완료될 수 있습니다. 복구될 트랜잭션은 지정된 트랜잭션 이전에 커밋되고 선택적으로 포함된 트랜잭션입니다. 정확한 중지 지점도 recovery_target_inclusive의 영향을받습니다.

recovery_target_lsn (pg_lsn)
이 매개 변수는 복구가 진행될 미리 쓰기 로그 위치의 LSN을 지정합니다. 정확한 중지 지점도 recovery_target_inclusive의 영향을 받습니다. 이 매개 변수는 시스템 데이터 유형 pg_lsn을 사용하여 구문 분석됩니다.
다음 옵션은 복구 대상을 추가로 지정하고 대상에 도달했을 때 발생하는 상황에 영향을줍니다.

recovery_target_inclusive (boolean)
지정된 복구 대상 바로 뒤 (on) 또는 복구 대상 바로 앞에서 (off) 중지할지 여부를 지정합니다. recovery_target_lsn, recovery_target_time 또는 recovery_target_xid가 지정된 경우 적용됩니다. 이 설정은 정확히 대상 WAL 위치(LSN), 커밋 시간 또는 트랜잭션 ID를 각각 가진 트랜잭션을 복구에 포함할지 여부를 제어합니다. 기본값은 켜져 있습니다.

recovery_target_timeline (string)
특정 타임 라인으로 복구를 지정합니다. 값은 숫자 타임 라인 ID 또는 특수 값일 수 있습니다. 현재 값은 기본 백업을 수행할 때 현재의 타임 라인을 따라 복구됩니다. 최신 값은 아카이브에서 발견 된 최신 타임 라인으로 복구되며 이는 대기 서버에서 유용합니다. 최신이 기본값입니다.
일반적으로 특정 시점 복구 후에 도달한 상태로 돌아 가야하는 복잡한 재복구 상황에서만 이 매개 변수를 설정하면됩니다. 자세한 내용은 섹션 25.3.5 : https://www.postgresql.org/docs/12/continuous-archiving.html#BACKUP-TIMELINES 를 참조하십시오.

recovery_target_action (enum)
복구 대상에 도달하면 서버가 수행해야하는 작업을 지정합니다. 기본값은 pause이며, 이는 복구가 일시 중지됨을 의미합니다. promote은 복구 프로세스가 완료되고 서버가 연결을 수락하기 시작 함을 의미합니다. 마지막으로 shutdown하면 복구 대상에 도달 한 후 서버가 중지됩니다.
pause 설정의 용도는 데이터베이스에 대해 쿼리를 실행하여이 복구 대상이 복구에 가장 적합한 지점인지 확인하는 것입니다. 일시 중지된 상태는 pg_wal_replay_resume() (표 9.86 참조 : https://www.postgresql.org/docs/12/functions-admin.html#FUNCTIONS-RECOVERY-CONTROL-TABLE)을 사용하여 다시 시작할 수 있으며, 그러면 복구가 종료됩니다. 이 복구 대상이 원하는 중지 지점이 아닌 경우 서버를 종료하고 복구 대상 설정을 이후 대상으로 변경한 다음 다시 시작하여 복구를 계속합니다.
shutdown은 원하는 정확한 재생 지점에서 인스턴스를 준비하는데 유용합니다. 인스턴스는 여전히 더 많은 WAL 레코드를 재생할 수 있습니다 (실제로 다음에 시작될 때 마지막 체크 포인트 이후로 WAL 레코드를 재생해야 함).
recovery_target_action이 shutdown으로 설정되면 recovery.signal 이 제거되지 않으므로 구성이 변경되거나 recovery.signal 파일이 수동으로 제거되지 않는 한 모든 후속 시작은 즉시 종료로 종료됩니다.
복구 대상이 설정되지 않은 경우 이 설정은 적용되지 않습니다. hot_standby가 활성화되지 않은 경우 pause 설정은 shutdown과 동일하게 작동합니다.

For additional information on tuning these settings, see Section 29.4.
https://www.postgresql.org/docs/12/wal-configuration.html
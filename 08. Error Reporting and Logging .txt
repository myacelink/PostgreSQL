◼︎ 로그 위치
log_destination (string)
PostgreSQL은 stderr, csvlog 및 syslog를 포함하여 서버 메시지 로깅을 위한 여러 방법을 지원합니다. Windows에서는 이벤트 로그도 지원됩니다.
이 매개 변수를 쉼표로 구분된 원하는 로그 대상 목록으로 설정하십시오. 기본값은 stderr에만 기록하는 것입니다.
이 매개 변수는 postgresql.conf 파일 또는 서버 명령줄에서만 설정할 수 있습니다.
csvlog가 log_destination에 포함된 경우 로그 항목이 "쉼표로 구분 된 값"(CSV) 형식으로 출력되므로 로그를 프로그램에 로드하는데 편리합니다.
자세한 내용은 섹션 19.8.4를 참조하십시오. CSV 형식 로그 출력을 생성하려면 logging_collector를 활성화해야합니다.
stderr 또는 csvlog가 포함된 경우 현재 로깅 수집기 및 관련 로깅 대상에서 사용중인 로그 파일의 위치를 기록하기 위해 current_logfiles 파일이 생성됩니다.
이는 인스턴스에서 현재 사용중인 로그를 찾는 편리한 방법을 제공합니다. 다음은 이 파일 내용의 예입니다.

stderr log/postgresql.log
csvlog log/postgresql.csv

current_logfiles는 회전 효과로 새 로그 파일이 생성 될 때와 log_destination이 다시로드 될 때 다시 생성됩니다.
stderr과 csvlog가 모두 log_destination에 포함되지 않고 로깅 수집기가 비활성화 된 경우 제거됩니다.

참고사항
대부분의 Unix 시스템에서 log_destination에 대한 syslog 옵션을 사용하려면 시스템의 syslog 데몬 구성을 변경해야 합니다.
PostgreSQL은 LOCAL0에서 LOCAL7까지의 syslog 기능에 로깅 할 수 있지만(syslog_facility 참조) 대부분의 플랫폼에서 기본 syslog 구성은 이러한 모든 메시지를 삭제합니다.
다음과 같은 것을 추가해야합니다.

local0.*    /var/log/postgresql
이 작동하도록 syslog 데몬의 구성 파일에 추가합니다.

Windows에서 log_destination에 eventlog 옵션을 사용하는 경우 Windows 이벤트 뷰어가 이벤트 로그 메시지를 깨끗하게 표시할 수 있도록
운영 체제에 이벤트 소스 및 해당 라이브러리를 등록해야합니다.
자세한 내용은 섹션 18.12를 참조하십시오.

logging_collector (boolean)
이 매개 변수는 stderr로 전송된 로그 메시지를 캡처하여 로그 파일로 경로를 재지정하는 백그라운드 프로세스인 로깅 콜렉터를 활성화합니다.
이 방법은 일부 유형의 메시지가 syslog 출력에 표시되지 않을 수 있으므로 syslog에 로깅하는 것보다 더 유용합니다.
(하나의 일반적인 예는 동적 링커 실패 메시지이고 다른 하나는 archive_command와 같은 스크립트에 의해 생성되는 오류 메시지입니다.)이 매개 변수는 서버 시작시에만 설정할 수 있습니다.

참고
로깅 콜렉터를 사용하지 않고 stderr에 로깅할 수 있습니다. 로그 메시지는 서버의 stderr가 지시되는 곳으로 이동합니다.
그러나 이 방법은 로그 파일을 회전하는 편리한 방법을 제공하지 않으므로 로그 볼륨이 낮은 경우에만 적합합니다.
또한 로깅 콜렉터를 사용하지 않는 일부 플랫폼에서는 동일한 로그 파일에 동시에 쓰는 여러 프로세스가 서로의 출력을 덮어쓸 수 있기 때문에 로그 출력이 손실되거나 왜곡될 수 있습니다.

참고
로깅 수집기는 메시지가 손실되지 않도록 설계되었습니다. 즉,로드가 매우 높은 경우 수집기가 뒤처 졌을때 추가 로그 메시지를 보내려고 시도하는 동안 서버 프로세스가 차단될 수 있습니다.
반대로 syslog는 메시지를 쓸 수 없는 경우 메시지를 삭제하는 것을 선호합니다. 이는 이러한 경우 일부 메시지를 기록하지 못할 수 있지만 나머지 시스템을 차단하지는 않음을 의미합니다.

log_directory (string)
logging_collector가 활성화되면 이 매개 변수는 로그 파일이 생성될 디렉토리를 결정합니다. 절대 경로로 지정하거나 클러스터 데이터 디렉토리에 상대적으로 지정할 수 있습니다.
이 매개 변수는 postgresql.conf 파일 또는 서버 명령 줄에서만 설정할 수 있습니다. 기본값은 log입니다.

log_filename (string)
logging_collector가 활성화된 경우 이 매개 변수는 생성된 로그 파일의 파일 이름을 설정합니다.
값은 strftime 패턴으로 처리되므로 %-escapes를 사용하여 시간에 따라 달라지는(time-varying) 파일 이름을 지정할 수 있습니다.
(시간대 종속 %-escapes가 있는 경우 계산은 log_timezone에 지정된 영역에서 수행됩니다.) 지원되는 %-escapes는 Open Group의 strftime 사양에 나열된 것과 유사합니다.
시스템의 strftime은 직접 사용되지 않으므로 플랫폼 별(비표준) 확장이 작동하지 않습니다. 기본값은 postgresql-%Y-%m-%d_%H%M%S.log입니다.
이스케이프없이 파일 이름을 지정하는 경우 로그 회전 유틸리티를 사용하여 결국 전체 디스크를 채우지 않도록 계획해야 합니다.
8.4이전 릴리스에서 %이스케이프가 없는 경우 PostgreSQL은 새 로그 파일 생성 시간의 에포크(epoch)를 추가하지만 더 이상 그렇지 않습니다.
log_destination에서 CSV 형식 출력이 활성화 된 경우 .csv가 타임 스탬프가 있는 로그 파일 이름에 추가되어 CSV 형식 출력을위한 파일 이름을 만듭니다.
(log_filename이 .log로 끝나면 대신 접미사가 바뀝니다.)
이 매개 변수는 postgresql.conf 파일 또는 서버 명령 줄에서만 설정할 수 있습니다.

log_file_mode (integer)
Unix 시스템에서이 매개 변수는 logging_collector가 활성화된 경우 로그 파일에 대한 권한을 설정합니다.
(Microsoft Windows에서이 매개 변수는 무시됩니다.) 매개 변수 값은 chmod 및 umask 시스템 호출에서 허용하는 형식으로 지정된 숫자 모드 여야합니다.
(일반적인 8 진수 형식을 사용하려면 숫자는 0 (영)으로 시작해야합니다.)
기본 권한은 0600입니다. 즉, 서버 소유자만 로그 파일을 읽거나 쓸 수 있습니다. 일반적으로 유용한 다른 설정은 0640으로 소유자 그룹의 구성원이 파일을 읽을 수 있도록 합니다.
그러나 이러한 설정을 사용하려면 log_directory를 변경하여 클러스터 데이터 디렉토리 외부에 파일을 저장해야합니다.
어쨌든 로그 파일은 민감한 데이터를 포함할 수 있으므로 모든 사람이 읽을 수 있도록 만드는 것은 현명하지 않습니다.
이 매개 변수는 postgresql.conf 파일 또는 서버 명령 줄에서만 설정할 수 있습니다.

log_rotation_age (integer)
logging_collector가 활성화된 경우 이 매개 변수는 개별 로그 파일을 사용하는 최대 시간을 결정한 후 새 로그 파일이 생성됩니다.
이 값이 단위없이 지정되면 분으로 간주됩니다. 기본값은 24 시간입니다. 시간 기반 새 로그 파일 작성을 사용하지 않으려면 0으로 설정하십시오.
이 매개 변수는 postgresql.conf 파일 또는 서버 명령 줄에서만 설정할 수 있습니다.

log_rotation_size (integer)
양의 데이터가 로그 파일로 내보내지면 새 로그 파일이 생성됩니다. 이 값이 단위없이 지정되면 킬로바이트로 간주됩니다. 기본값은 10MB입니다.
새 로그 파일의 크기 기반 생성을 비활성화하려면 0으로 설정합니다. 이 매개 변수는 postgresql.conf 파일 또는 서버 명령 줄에서만 설정할 수 있습니다.

log_truncate_on_rotation (boolean)
logging_collector가 활성화 된 경우, 이 매개 변수는 PostgreSQL이 동일한 이름의 기존 로그 파일에 추가하는 대신 자르기(덮어 쓰기)하도록 합니다.
그러나 서버 시작 또는 크기 기반 순환이 아닌 시간 기반 순환으로 인해 새 파일이 열리는 경우에만 잘림이 발생합니다. 꺼져 있으면 모든 경우에 기존 파일이 추가됩니다.
예를 들어 이 설정을 postgresql-% H.log와 같은 log_filename과 함께 사용하면 24개의 시간별 로그 파일을 생성한 다음 주기적으로 덮어 씁니다.
이 매개 변수는 postgresql.conf 파일 또는 서버 명령 줄에서만 설정할 수 있습니다.

예 : 7 일간의 로그에서, server_log.Mon, server_log.Tue 등의 로그 파일을 하루에 하나씩 보관하고
지난주의 로그를 이번주의 로그로 자동 덮어 쓰려면 log_filename을 server_log.% a로, log_truncate_on_rotation을 on으로, log_rotation_age 1440으로 설정합니다.

예 : 24 시간의 로그, 시간당 하나의 로그 파일을 유지하지만 로그 파일 크기가 1GB를 초과하는 경우 더 빨리 회전하려면
log_filename을 server_log.%H%M으로, log_truncate_on_rotation을 on으로, log_rotation_age를 60으로, log_rotation_size를 1000000으로 설정합니다.
log_filename에 %M을 포함하면 발생할 수 있는 크기 기반 회전에서 시간의 초기 파일 이름과 다른 파일 이름을 선택할 수 있습니다.

syslog_facility (enum)
syslog에 로깅이 활성화된 경우 이 매개 변수는 사용할 syslog "시설"을 결정합니다. LOCAL0, LOCAL1, LOCAL2, LOCAL3, LOCAL4, LOCAL5, LOCAL6, LOCAL7 중에서 선택할 수 있습니다.
기본값은 LOCAL0입니다. 시스템의 syslog 데몬 문서도 참조하십시오. 이 매개 변수는 postgresql.conf 파일 또는 서버 명령 줄에서만 설정할 수 있습니다.

syslog_ident (string)
syslog에 로깅이 활성화 된 경우 이 매개 변수는 syslog 로그에서 PostgreSQL 메시지를 식별하는 데 사용되는 프로그램 이름을 결정합니다.
기본값은 postgres입니다. 이 매개 변수는 postgresql.conf 파일 또는 서버 명령 줄에서만 설정할 수 있습니다.

syslog_sequence_numbers (boolean)
syslog에 로깅하고 이것이 켜져있는 경우 (기본값), 각 메시지 앞에 증가하는 시퀀스 번호 (예 : [2])가 붙습니다.
이것은 많은 syslog 구현이 기본적으로 수행하는 “--- last message repeated N times ---” 억제를 우회합니다.
보다 현대적인 syslog 구현에서는 반복되는 메시지 억제를 구성할 수 있으므로 (예 : rsyslog의 $ RepeatedMsgReduction) 필요하지 않을 수 있습니다.
또한 반복되는 메시지를 실제로 억제하려면 이 기능을 끌 수 있습니다.
이 매개 변수는 postgresql.conf 파일 또는 서버 명령 줄에서만 설정할 수 있습니다.

syslog_split_messages (boolean)
syslog에 로깅이 활성화된 경우 이 매개 변수는 메시지가 syslog에 전달되는 방식을 결정합니다.
설정하면 (기본값) 메시지가 행별로 분할되고 긴 행이 분할되어 기존 syslog 구현의 일반적인 크기 제한 인 1024바이트에 맞습니다.
꺼져 있으면 PostgreSQL 서버 로그 메시지가 있는 그대로 syslog 서비스에 전달되며 잠재적으로 부피가 큰 메시지를 처리하는 것은 syslog 서비스에 달려 있습니다.
syslog가 궁극적으로 텍스트 파일에 로깅하는 경우 효과는 어느 쪽이든 동일하며 대부분의 syslog 구현은 큰 메시지를 처리할 수 없거나
이를 처리하도록 특별히 구성해야하기 때문에 설정을 그대로 두는 것이 가장 좋습니다. 그러나 syslog가 궁극적으로 다른 매체에 기록하는 경우
메시지를 논리적으로 함께 보관하는 것이 필요하거나 더 유용 할 수 있습니다.
이 매개 변수는 postgresql.conf 파일 또는 서버 명령 줄에서만 설정할 수 있습니다.

event_source (string)
이벤트 로그에 로깅이 활성화된 경우 이 매개 변수는 로그에서 PostgreSQL 메시지를 식별하는 데 사용되는 프로그램 이름을 결정합니다.
기본값은 PostgreSQL입니다. 이 매개 변수는 postgresql.conf 파일 또는 서버 명령줄에서만 설정할 수 있습니다.

◼︎ 기록시기
log_min_messages (enum)
서버 로그에 기록되는 메시지 수준을 제어합니다. 유효한 값은 DEBUG5, DEBUG4, DEBUG3, DEBUG2, DEBUG1, INFO, NOTICE, WARNING, ERROR, LOG, FATAL 및 PANIC입니다.
각 레벨에는 그 뒤에 오는 모든 레벨이 포함됩니다. 수준이 나중일수록 로그에 전송되는 메시지 수가 적습니다. 기본값은 WARNING입니다. 여기서 LOG의 순위는 client_min_messages와 다릅니다.
수퍼 유저만이 설정을 변경할 수 있습니다.

log_min_error_statement (enum)
오류 조건을 유발하는 SQL문이 서버 로그에 기록되는 것을 제어합니다. 현재 SQL문은 지정된 심각도 이상의 메시지에 대한 로그 항목에 포함됩니다.
유효한 값은 DEBUG5, DEBUG4, DEBUG3, DEBUG2, DEBUG1, INFO, NOTICE, WARNING, ERROR, LOG, FATAL 및 PANIC입니다.
기본값은 ERROR이며 이는 오류, 로그 메시지, 치명적 오류 또는 패닉을 유발하는 명령문이 기록됨을 의미합니다.
실패한 명령문의 로깅을 효과적으로 끄려면 이 매개 변수를 PANIC로 설정하십시오. 수퍼 유저만이 설정을 변경할 수 있습니다.

log_min_duration_statement (integer)
명령문이 최소한 지정된 시간 동안 실행된 경우 완료된 각 명령문의 기간이 기록됩니다. 이 값이 단위없이 지정되면 밀리초로 간주됩니다.
이 값을 0으로 설정하면 모든 명령문 기간이 인쇄됩니다. 마이너스 1 (기본값)은 로깅문 기간을 비활성화합니다.
예를 들어, 250ms로 설정하면 250ms 이상을 실행하는 모든 SQL 문이 기록됩니다. 이 매개 변수를 활성화하면 애플리케이션에서 최적화되지 않은 쿼리를 추적하는 데 도움이 될 수 있습니다.
수퍼 유저만이 설정을 변경할 수 있습니다.
확장 쿼리 프로토콜을 사용하는 클라이언트의 경우 구문 분석, 바인딩 및 실행 단계의 기간이 독립적으로 기록됩니다.

노트
이 옵션을 log_statement와 함께 사용하면 log_statement로 인해 기록된 명령문의 텍스트가 기간 로그 메시지에서 반복되지 않습니다.
syslog를 사용하지 않는 경우 log_line_prefix를 사용하여 PID 또는 세션 ID를 기록하는 것이 좋습니다.
그러면 프로세스 ID 또는 세션 ID를 사용하여 문 메시지를 이후 기간 메시지에 연결할 수 있습니다.

log_transaction_sample_rate (real)
다른 이유로 기록된 명령문 외에 명령문이 모두 기록된 트랜잭션의 비율을 설정합니다. 명세서의 기간에 관계없이 각각의 새로운 거래에 적용됩니다.
기본값은 0이며, 추가 트랜잭션의 문을 기록하지 않음을 의미합니다. 1로 설정하면 모든 트랜잭션에 대한 모든 명령문이 기록됩니다.
log_transaction_sample_rate는 트랜잭션 샘플을 추적하는 데 유용합니다. 수퍼 유저 만이 설정을 변경할 수 있습니다.

노트
모든 명령문 로깅 옵션과 마찬가지로 이 옵션은 상당한 오버 헤드를 추가 할 수 있습니다.
표 19.2는 PostgreSQL에서 사용하는 메시지 심각도 수준을 설명합니다. 로깅 출력이 syslog 또는 Windows의 이벤트 로그로 전송되는 경우 심각도 수준은 표에 표시된대로 변환됩니다.

표 19.2. 메시지 심각도 수준
Severity         |           Usage                                                                                        |  syslog  |  eventlog
DEBUG1..DEBUG5   |  Provides successively-more-detailed information for use by developers.                                |  DEBUG   |  INFORMATION
INFO             |  Provides information implicitly requested by the user, e.g., output from VACUUM VERBOSE.              |  INFO    |  INFORMATION
NOTICE           |  Provides information that might be helpful to users, e.g., notice of truncation of long identifiers.  |  NOTICE  |  INFORMATION
WARNING          |  Provides warnings of likely problems, e.g., COMMIT outside a transaction block.                       |  NOTICE  |  WARNING
ERROR            |  Reports an error that caused the current command to abort.                                            |  WARNING |  ERROR
LOG              |  Reports information of interest to administrators, e.g., checkpoint activity.                         |  INFO    |  INFORMATION
FATAL            |  Reports an error that caused the current session to abort.                                            |  ERR     |  ERROR
PANIC            |  Reports an error that caused all database sessions to abort.                                          |  CRIT    |  ERROR

◼︎ 기록할 내용
application_name (string)
application_name은 NAMEDATALEN 문자 (표준 빌드에서 64자) 미만의 문자열일 수 있습니다. 일반적으로 서버에 연결할 때 응용 프로그램에서 설정합니다.
이름은 pg_stat_activity보기에 표시되고 CSV 로그 항목에 포함됩니다. log_line_prefix매개 변수를 통해 일반 로그 항목에 포함될 수도 있습니다.
인쇄 가능한 ASCII 문자만 application_name 값에 사용할 수 있습니다. 다른 문자는 물음표(?)로 대체됩니다.

debug_print_parse (boolean) 
debug_print_rewritten (boolean) 
debug_print_plan (boolean)
이러한 매개 변수를 사용하여 다양한 디버깅 출력을 내보낼 수 있습니다. 설정되면 결과 구문 분석 트리, 쿼리 재 작성기 출력 또는 실행된 각 쿼리의 실행 계획을 인쇄합니다.
이러한 메시지는 LOG 메시지 수준에서 생성되므로 기본적으로 서버 로그에 표시되지만 클라이언트로 전송되지는 않습니다.
client_min_messages 와 log_min_messages를 조정하여 변경할 수 있습니다. 이러한 매개 변수는 기본적으로 꺼져 있습니다.

debug_pretty_print (boolean)
설정되면 debug_pretty_print는 debug_print_parse, debug_print_rewritten 또는 debug_print_plan에 의해 생성된 메시지를 들여 씁니다.
이로 인해 꺼져있을 때 사용되는 "압축"형식보다 더 읽기 쉽지만 출력이 훨씬 길어집니다. 기본적으로 켜져 있습니다.

log_checkpoints (boolean)
체크 포인트 및 재시작 시점이 서버 로그에 기록되도록 합니다. 기록된 버퍼수와 기록에 소요된 시간을 포함하여 일부 통계가 로그 메시지에 포함됩니다.
이 매개 변수는 postgresql.conf 파일 또는 서버 명령 줄에서만 설정할 수 있습니다. 기본값은 꺼짐입니다.

log_connections (boolean)
서버에 대한 각 시도된 연결이 기록되고 클라이언트 인증이 성공적으로 완료됩니다. 수퍼 유저만이 세션 시작시 이 매개 변수를 변경할 수 있으며 세션 내에서 전혀 변경할 수 없습니다.
기본값은 꺼짐입니다.

노트
psql과 같은 일부 클라이언트 프로그램은 암호가 필요한지 확인하는 동안 두 번 연결을 시도하므로 중복된 "연결 수신"메시지가 반드시 문제를 나타내는 것은 아닙니다.

log_disconnections (boolean)
세션 종료를 기록합니다. 로그 출력은 log_connections와 유사한 정보와 세션 기간을 제공합니다.
수퍼 유저만이 세션 시작시 이 매개 변수를 변경할 수 있으며 세션 내에서 전혀 변경할 수 없습니다. 기본값은 꺼짐입니다.

log_duration (boolean)
완료된 모든 명령문의 기간이 기록되도록합니다. 기본값은 꺼짐입니다. 수퍼 유저만이 설정을 변경할 수 있습니다.
확장 쿼리 프로토콜을 사용하는 클라이언트의 경우 구문 분석, 바인딩 및 실행 단계의 기간이 독립적으로 기록됩니다.

노트
log_duration을 활성화하는 것과 log_min_duration_statement를 0으로 설정하는 것의 차이점은 log_min_duration_statement를 초과하면
쿼리 텍스트가 강제로 기록되지만 이 옵션은 기록되지 않는다는 것입니다. 따라서 log_duration이 켜져 있고 log_min_duration_statement에 양수값이
있으면 모든 기간이 기록되지만 쿼리 텍스트는 임계 값을 초과하는 문에 대해서만 포함됩니다. 이 동작은 고부하 설치에서 통계를 수집하는 데 유용 할 수 있습니다.


log_error_verbosity (enum)
기록되는 각 메시지에 대해 서버 로그에 기록되는 세부 정보의 양을 제어합니다. 유효한 값은 TERSE, DEFAULT 및 VERBOSE이며 각각 표시되는 메시지에 더 많은 필드를 추가합니다.
TERSE는 DETAIL, HINT, QUERY 및 CONTEXT 오류 정보의 로깅을 제외합니다.
VERBOSE 출력에는 SQLSTATE 오류 코드 (부록 A 참조)와 오류를 생성 한 소스 코드 파일 이름, 함수 이름 및 줄 번호가 포함됩니다. 수퍼 유저 만이 설정을 변경할 수 있습니다.

log_hostname (boolean)
기본적으로 연결 로그 메시지에는 연결 호스트의 IP 주소만 표시됩니다. 이 매개 변수를 켜면 호스트 이름도 로깅됩니다.
호스트 이름 확인 설정에 따라 무시할 수 없는 성능 저하가 발생할 수 있습니다. 이 매개 변수는 postgresql.conf 파일 또는 서버 명령 줄에서만 설정할 수 있습니다.

log_line_prefix (string)
이것은 각 로그 행의 시작 부분에 출력되는 printf 스타일 문자열입니다. %문자는 아래에 설명된대로 상태 정보로 대체되는 "이스케이프 시퀀스"로 시작합니다.
인식할 수 없는 이스케이프는 무시됩니다. 다른 문자는 로그 라인에 바로 복사됩니다.
일부 이스케이프는 세션 프로세스에서만 인식되며 주 서버 프로세스와 같은 백그라운드 프로세스에서 비어있는 것으로 처리됩니다.
%뒤와 옵션 앞에 숫자 리터럴을 지정하여 상태 정보를 왼쪽 또는 오른쪽으로 정렬할 수 있습니다. 음수 값은 최소 너비를 제공하기 위해 오른쪽이 공백으로 채워지고 양수 값은 왼쪽이 채워집니다.
패딩은 로그 파일에서 사람이 쉽게 읽을 수 있도록 하는데 유용할 수 있습니다. 이 매개 변수는 postgresql.conf 파일 또는 서버 명령 줄에서만 설정할 수 있습니다.
기본값은 타임 스탬프와 프로세스 ID를 기록하는 '% m [%p]' 입니다.

Escape     | Effect(이스케이프 효과)                                                                        |  Session only(오직 세션에서만)
%a         |  응용 프로그램 이름                                                                            |  yes
%u         |  사용자 이름                                                                                  |  yes
%d         |  데이터베이스 이름                                                                             |  yes
%r         |  원격 호스트 이름 또는 IP 주소 및 원격 포트                                                         |  yes
%h         |  원격 호스트 이름 또는 IP 주소                                                                   |  yes
%p         |  프로세스 ID                                                                                 |  no
%n         |  milliseconds를 제외한 타임 스탬프                                                              |  no
%m         |  milliseconds가 있는 타임 스탬프                                                               |  no
%n         |  milliseconds가 있는 타임 스탬프 (Unix epoch)                                                  |  no
%i         |  명령 태그 : 세션의 현재 명령 유형                                                                |  yes
%e         |  SQLSTATE 오류 코드                                                                          |  no 
%c         |  세션 ID : 아래 참조                                                                          |  no
%l         |  1부터 시작하는 각 세션 또는 프로세스에 대한 로그 줄 번호                                              |  no
%s         |  프로세스 시작 타임 스탬프                                                                       |  no
%v         |  가상 트랜잭션 ID (backendID / localXID)                                                      |  no
%x         |  트랜잭션 ID (할당되지 않은 경우 0)                                                              |  no 
%q         |  출력을 생성하지 않지만 세션이 아닌 프로세스에 문자열의이 지점에서 중지하도록 지시합니다. 세션 프로세스에 의해 무시됨  |  no
%%         |  literal %                                                                                |  no
%c 이스케이프는 점으로 구분된 두 개의 4바이트 16진수(앞에 0이 없음)로 구성된 일련의(가상의) 고유 세션 식별자를 인쇄합니다.
숫자는 프로세스 시작 시간과 프로세스 ID이므로 %c는 해당 항목을 인쇄하는 공간 절약 방법으로도 사용할 수 있습니다.
예를 들어 pg_stat_activity에서 세션 식별자를 생성하려면 다음 쿼리를 사용합니다.

SELECT to_hex(trunc(EXTRACT(EPOCH FROM backend_start))::integer) || '.' ||
       to_hex(pid)
FROM pg_stat_activity;

팁
log_line_prefix에 비어 있지 않은 값을 설정하는 경우 일반적으로 나머지 로그 행과 시각적으로 구분되도록 마지막 문자를 공백으로 만들어야합니다.
구두점 문자도 사용할 수 있습니다.

팁
Syslog는 자체 타임 스탬프와 프로세스 ID 정보를 생성하므로 syslog에 로깅하는 경우 이러한 이스케이프를 포함하지 않을 수 있습니다.

팁
%q 이스케이프는 사용자 또는 데이터베이스 이름과 같은 세션 (백엔드) 컨텍스트에서만 사용할 수있는 정보를 포함 할 때 유용합니다. 예를 들면 :
log_line_prefix = '%m [%p] %q%u@%d/%a '

log_lock_waits (boolean)
세션이 잠금을 획득하기 위해 deadlock_timeout보다 오래 대기할 때 로그 메시지 생성 여부를 제어합니다. 이는 잠금 대기로 인해 성능이 저하되는지 여부를 판별하는 데 유용합니다.
기본값은 꺼짐입니다. 수퍼 유저만이 설정을 변경할 수 있습니다.

log_statement (enum)
기록되는 SQL 문을 제어합니다. 유효한 값은 none(off), ddl, mod 및 all(모든 문)입니다. ddl은 CREATE, ALTER 및 DROP 문과 같은 모든 데이터 정의 문을 기록합니다.
mod는 모든 ddl 문과 INSERT, UPDATE, DELETE, TRUNCATE 및 COPY FROM과 같은 데이터 수정 문을 기록합니다.
포함된 명령이 적절한 유형 인 경우 PREPARE, EXECUTE 및 EXPLAIN ANALYZE 문도 기록됩니다.
확장 쿼리 프로토콜을 사용하는 클라이언트의 경우 실행 메시지가 수신될 때 로깅이 발생하고 Bind 매개 변수의 값이 포함됩니다 (포함 된 작은 따옴표 표시가 두 배가 됨).
기본값은 없음입니다. 수퍼 유저 만이 설정을 변경할 수 있습니다.

참고사항
간단한 구문 오류가 포함된 문은 log_statement = all 설정으로도 기록되지 않습니다. 로그 메시지는 명령문 유형을 결정하기 위해 기본 구문 분석이 완료된 후에만 생성되기 때문입니다.
확장 쿼리 프로토콜의 경우에도 이 설정은 실행 단계(즉, 구문 분석 또는 계획 중) 전에 실패한 문을 기록하지 않습니다.
log_min_error_statement를 ERROR(또는 그 이하)로 설정하여 이러한 명령문을 기록합니다.

log_replication_commands (boolean)
각 복제 명령이 서버 로그에 기록되도록 합니다. 복제 명령에 대한 자세한 내용은 섹션 52.4를 참조하십시오. 기본값은 꺼짐입니다. 수퍼 유저만이 설정을 변경할 수 있습니다.
섹션 52.4 : https://www.postgresql.org/docs/12/protocol-replication.html

log_temp_files (integer)
임시 파일 이름 및 크기의 로깅을 제어합니다. 정렬, 해시 및 임시 쿼리 결과를 위해 임시 파일을 만들 수 있습니다.
이 설정으로 활성화하면 삭제될 때 각 임시 파일에 대한 로그 항목이 생성됩니다. 0 값은 모든 임시 파일 정보를 기록하고 양수 값은 지정된 데이터 양보다 크거나 같은 파일만 기록합니다.
이 값이 단위없이 지정되면 킬로바이트로 간주됩니다. 기본 설정은 -1이며 이러한 로깅을 비활성화합니다. 수퍼 유저만이 설정을 변경할 수 있습니다.

log_timezone (string)
서버 로그에 기록된 타임 스탬프에 사용되는 시간대를 설정합니다. TimeZone과 달리 이 값은 클러스터 전체에 적용되므로 모든 세션이 일관되게 타임 스탬프를 보고합니다.
기본 제공 기본값은 GMT이지만 일반적으로 postgresql.conf에서 재정의됩니다. initdb는 시스템 환경에 해당하는 설정을 환경파일에 설정합니다.
자세한 내용은 8.5.3 절을 참조하십시오. 이 매개 변수는 postgresql.conf 파일 또는 서버 명령 줄에서만 설정할 수 있습니다.
8.5.3 : https://www.postgresql.org/docs/12/datatype-datetime.html#DATATYPE-TIMEZONES

◼︎ CSV 형식 로그 출력 사용
log_destination 목록에 csvlog를 포함하면 로그 파일을 데이터베이스 테이블로 편리하게 가져올 수 있습니다.
이 옵션은 밀리 초가 포함된 타임 스탬프, 사용자 이름, 데이터베이스 이름, 프로세스 ID, 클라이언트 호스트:포트 번호, 세션 ID, 세션별 줄 번호,
명령 컬럼과 함께 CSV (쉼표로 구분 된 값) 형식으로 로그 줄을 내 보냅니다.
태그, 세션 시작 시간, 가상 트랜잭션 ID, 일반 트랜잭션 ID, 오류 심각도, SQLSTATE 코드, 오류 메시지, 오류 메시지 세부 정보, 힌트, 오류를 유발한 내부 쿼리 (있는 경우),
오류 위치의 문자 수, 오류 컨텍스트, 오류를 유발한 사용자 쿼리 (있는 경우 log_min_error_statement에 의해 활성화 됨),
오류 위치의 문자 수, PostgreSQL 소스 코드의 오류 위치(log_error_verbosity가 verbose로 설정된 경우) 및 애플리케이션 이름.
다음은 CSV 형식 로그 출력을 저장하기위한 샘플 테이블 정의입니다.

CREATE TABLE postgres_log
(
  log_time timestamp(3) with time zone,
  user_name text,
  database_name text,
  process_id integer,
  connection_from text,
  session_id text,
  session_line_num bigint,
  command_tag text,
  session_start_time timestamp with time zone,
  virtual_transaction_id text,
  transaction_id bigint,
  error_severity text,
  sql_state_code text,
  message text,
  detail text,
  hint text,
  internal_query text,
  internal_query_pos integer,
  context text,
  query text,
  query_pos integer,
  location text,
  application_name text,
  PRIMARY KEY (session_id, session_line_num)
);

이 테이블로 로그 파일을 가져 오려면 COPY FROM 명령을 사용합니다.
COPY postgres_log FROM '/full/path/to/logfile.csv' WITH csv;

제공된 file_fdw 모듈을 사용하여 외부 테이블로 파일에 액세스 할 수도 있습니다.
CSV 로그 파일 가져 오기를 단순화하기 위해 수행해야하는 몇 가지 작업이 있습니다.
log_filename 및 log_rotation_age를 설정하여 로그 파일에 일관되고 예측 가능한 이름 지정 체계를 제공합니다.
이렇게하면 파일 이름을 예측하고 개별 로그 파일이 완료되어 가져올 준비가 된시기를 알 수 있습니다.
log_rotation_size를 0으로 설정하면 로그 파일 이름을 예측하기 어렵기 때문에 크기 기반 로그 회전을 비활성화합니다.
이전 로그 데이터가 동일한 파일에서 새 로그 데이터와 혼합되지 않도록 log_truncate_on_rotation을 on으로 설정합니다.
위의 테이블 정의에는 Primary키가 포함되어 있습니다. 이는 실수로 동일한 정보를 두 번 가져 오는 것을 방지하는 데 유용합니다.
COPY 명령은 한번에 가져 오는 모든 데이터를 커밋하므로 오류가 발생하면 전체 가져 오기가 실패합니다.
부분 로그 파일을 가져오고 나중에 완료되었을 때 파일을 다시 가져 오는 경우 Primary키 위반으로 인해 가져 오기가 실패합니다.
가져 오기 전에 로그가 완료되고 닫힐때까지 기다립니다. 이 절차는 또한 완전히 작성되지 않은 부분 줄을 실수로 가져 오는 것을 방지하여 COPY가 실패하는 원인이 됩니다.

◼︎ 프로세스 제목
이러한 설정은 서버 프로세스의 프로세스 제목이 수정되는 방식을 제어합니다.
프로세스 제목은 일반적으로 ps 또는 Windows의 경우 Process Explorer와 같은 프로그램을 사용하여 표시됩니다. 자세한 내용은 섹션 27.1을 참조하십시오.
섹션 27.1 : https://www.postgresql.org/docs/12/monitoring-ps.html

cluster_name (string)
다양한 목적으로 이 데이터베이스 클러스터(인스턴스)를 식별하는 이름을 설정합니다. 클러스터 이름은 이 클러스터의 모든 서버 프로세스에 대한 프로세스 제목에 나타납니다.
또한 대기 연결의 기본 애플리케이션 이름입니다 (synchronous_standby_names 참조).
이름은 NAMEDATALEN 문자(표준 빌드에서 64자) 미만의 문자열일 수 있습니다. 인쇄 가능한 ASCII 문자 만 cluster_name 값에 사용할 수 있습니다.
다른 문자는 물음표 (?)로 대체됩니다. 이 매개 변수가 빈 문자열 ''(기본값)로 설정되면 이름이 표시되지 않습니다. 이 매개 변수는 서버 시작시에만 설정할 수 있습니다.

update_process_title (boolean)
서버에서 새 SQL 명령을받을 때마다 프로세스 제목을 업데이트 할 수 있습니다. 이 설정은 대부분의 플랫폼에서 기본적으로 on으로 설정되어 있지만
Windows에서는 프로세스 제목을 업데이트하기위한 더 큰 오버 헤드로 인해 기본적으로 해제되어 있습니다. 수퍼 유저만이 설정을 변경할 수 있습니다.

https://www.postgresql.org/docs/12/runtime-config-logging.html